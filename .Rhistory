mapGraph("B02001", "Native Hawaiian and Other Pacific Islander Percent of State Population", "HAIslanderPopMap.png", "Percent", 6, TRUE)
#QUESTION 2: foreign born speak english and spanish well
mapGraph("B16005", "Number of Foreign Born Individuals Who Speak English and Spanish Very Well by State", "SpanEngFBPop.png", "Population", 27)
#QUESTION 3: Median Income by Place of Birth
medianIncomeBirth("MedIncBirthPlace.png")
#EXTRA FEATURE 1: public assistance by state
mapGraph("B09010", "Percent of State Population Receiving Public Assistance", "Assist.png", "Percent", 2, TRUE)
#EXTRA FEATURE 2:  tranpsortation
barGraph(tableIn="B08121", rangeA=2, rangeB=7, namesVec=c("Drove Alone", "Carpooled", "Public Transport", "Walked", "Other Transport", "Worked at Home"), ylabIn="Median Income ($)", xlabIn="Mode of Transportation to Work", title="Median Income by Mode of Transportation", colIn="red", fileName="MedIncTrans.png")
#EXTRA FEATURE 3:  age by geographic mobility
barGraph(tableIn="B07002",rangeA=2, rangeB=6, namesVec=c("Same House", "Same County", "Same State", "Different State", "From Abroad"), ylabIn="Age", xlabIn="Geographic Mobility within the Last Year", title="Age by Geographic Mobility", colIn="blue", fileName="AgeGeoMob.png")
#EXTRA FEATURE 4:  income by geographic mobility
barGraph(tableIn="B07011", rangeA=2, rangeB=6, namesVec=c("Same House", "Same County", "Same State", "Different State", "From Abroad"), ylabIn="Income", xlabIn="Geographic Mobility within the Last Year", title="Median Income by Geographic Mobility", colIn="darkgreen", fileName="IncGeoMob.png")
#EXTRA FEATURE 5: marriage age and divorces
mapGraph("B12007", "Median Age at First Marriage (Men) by State", "MenFirMar.png", "Median Age", 1)
mapGraph("B12007", "Median Age at First Marriage (Women) by State", "WomFirMar.png", "Median Age", 2)
mapGraphPop("B12503", "Number of Divorces by State Normalized by State Population", "div.png", "Proportion", 1)
source('~/133/project3.R', echo=TRUE)
source('~/133/project3.R', echo=TRUE)
mapGraph("B02001", "Asian Percent of State Population", "AsianPopMap.png", "Percent Asian", 5, TRUE)
barGraph <- function(tableIn, rangeA=NA, rangeB=NA, namesVec, ylabIn, xlabIn, title, colIn, fileNP){
#fileNP = paste("133/FinalProjectPlots/", fileName)
png(file=fileNP, height=400, width=750,bg="white")
data = estimate(acs.fetch(endyear=2014, span = 5, geography=geo.make(1), table.number=tableIn,  dataset = "acs",  col.names = "pretty", key="acf32fbd72b49ffb807e95c80948b75fb179f30e"))
if(!is.na(rangeA) && !is.na(rangeB)){
data = data[rangeA:rangeB]
}
print(barplot(data, names.arg=namesVec, ylab=ylabIn, xlab=xlabIn, main=title, col=colIn))
dev.off()
}
medianIncomeBirth <- function(fileNP){
#fileNP=paste("133/FinalProjectPlots/", fileName)
png(file=fileNP, height=350, width=600,bg="white")
birthIncome = estimate(acs.fetch(endyear=2014, span = 5, geography=geo.make(1), table.number="B06010",  dataset = "acs",  col.names = "pretty", key="acf32fbd72b49ffb807e95c80948b75fb179f30e"))
native = birthIncome[37:44]
foreign = birthIncome[48:55]
normNative = native/sum(native)
normForeign = foreign/sum(foreign)
incomeBorn = matrix(c(normdf6, normdf7), nrow=2, ncol=8, byrow = TRUE)
print(barplot(incomeBorn, beside=TRUE, names.arg=c("10","", "10-15", "", "15-25","", "25-35","", "35-50","", "50-65","","65-75","", "75+",""), legend.text = c("Native", "Foreign"), ylab="Percent Frequency", xlab="Median Income (In Thousands)", col = c("darkgreen", "darkblue"), main="Percent Frequency of Income Bracket for Native and Foreign Born Residents"))
dev.off()
}
mapGraph("B02001", "Asian Percent of State Population", "AsianPopMap.png", "Percent Asian", 5, TRUE)
require(acs)
require(choroplethr)
api.key.install("acf32fbd72b49ffb807e95c80948b75fb179f30e")
mapGraph <- function(table, titleIn, fileNP, legendTitle, colIn, norm=FALSE){
#fileNP = paste("133/FinalProjectPlots/", fileName)
png(filename=fileNP, height=250, width=650,bg="white")
df = get_acs_data(table, "state", column_idx = colIn)[[1]]
if(norm==TRUE){
dfNorm = get_acs_data(table, "state", column_idx = 1)[[1]]
df$value = (df$value / dfNorm$value) * 100
}
print(state_choropleth(df, title = titleIn, legend=legendTitle))
dev.off()
}
mapGraphPop <- function(table, titleIn, fileNP, legendTitle, colIn){
#fileNP = paste("133/FinalProjectPlots/", fileName)
png(filename=fileNP, height=250, width=550,bg="white")
dfPop = get_acs_data("B02001", "state", column_idx = 1)[[1]]
df = get_acs_data(table, "state", column_idx = colIn)[[1]]
df$value = (df$value / dfPop$value)
print(state_choropleth(df, title = titleIn, legend=legendTitle))
dev.off()
}
barGraph <- function(tableIn, rangeA=NA, rangeB=NA, namesVec, ylabIn, xlabIn, title, colIn, fileNP){
#fileNP = paste("133/FinalProjectPlots/", fileName)
png(file=fileNP, height=400, width=750,bg="white")
data = estimate(acs.fetch(endyear=2014, span = 5, geography=geo.make(1), table.number=tableIn,  dataset = "acs",  col.names = "pretty", key="acf32fbd72b49ffb807e95c80948b75fb179f30e"))
if(!is.na(rangeA) && !is.na(rangeB)){
data = data[rangeA:rangeB]
}
print(barplot(data, names.arg=namesVec, ylab=ylabIn, xlab=xlabIn, main=title, col=colIn))
dev.off()
}
medianIncomeBirth <- function(fileNP){
#fileNP=paste("133/FinalProjectPlots/", fileName)
png(file=fileNP, height=350, width=600,bg="white")
birthIncome = estimate(acs.fetch(endyear=2014, span = 5, geography=geo.make(1), table.number="B06010",  dataset = "acs",  col.names = "pretty", key="acf32fbd72b49ffb807e95c80948b75fb179f30e"))
native = birthIncome[37:44]
foreign = birthIncome[48:55]
normNative = native/sum(native)
normForeign = foreign/sum(foreign)
incomeBorn = matrix(c(normdf6, normdf7), nrow=2, ncol=8, byrow = TRUE)
print(barplot(incomeBorn, beside=TRUE, names.arg=c("10","", "10-15", "", "15-25","", "25-35","", "35-50","", "50-65","","65-75","", "75+",""), legend.text = c("Native", "Foreign"), ylab="Percent Frequency", xlab="Median Income (In Thousands)", col = c("darkgreen", "darkblue"), main="Percent Frequency of Income Bracket for Native and Foreign Born Residents"))
dev.off()
}
#QUESTION 1: Race by State
mapGraph("B02001", "Total Population by State", "TotalPopMap.png", "Population", 1)
mapGraph("B02001", "White Percent of State Population", "WhitePopMap.png", "Percent White", 2, TRUE)
mapGraph("B02001", "Black or African American Percent of State Population", "BlackPopMap.png", "Percent Black", 3, TRUE)
mapGraph("B02001", "American Indian and Alaska Native Percent of State Population", "NativePopMap.png", "Percent Native", 4, TRUE)
mapGraph("B02001", "Asian Percent of State Population", "AsianPopMap.png", "Percent Asian", 5, TRUE)
mapGraph("B02001", "Native Hawaiian and Other Pacific Islander Percent of State Population", "HAIslanderPopMap.png", "Percent", 6, TRUE)
#QUESTION 2: foreign born speak english and spanish well
mapGraph("B16005", "Number of Foreign Born Individuals Who Speak English and Spanish Very Well by State", "SpanEngFBPop.png", "Population", 27)
#QUESTION 3: Median Income by Place of Birth
medianIncomeBirth("MedIncBirthPlace.png")
#EXTRA FEATURE 1: public assistance by state
mapGraph("B09010", "Percent of State Population Receiving Public Assistance", "Assist.png", "Percent", 2, TRUE)
#EXTRA FEATURE 2:  tranpsortation
barGraph(tableIn="B08121", rangeA=2, rangeB=7, namesVec=c("Drove Alone", "Carpooled", "Public Transport", "Walked", "Other Transport", "Worked at Home"), ylabIn="Median Income ($)", xlabIn="Mode of Transportation to Work", title="Median Income by Mode of Transportation", colIn="red", fileNP="MedIncTrans.png")
#EXTRA FEATURE 3:  age by geographic mobility
barGraph(tableIn="B07002",rangeA=2, rangeB=6, namesVec=c("Same House", "Same County", "Same State", "Different State", "From Abroad"), ylabIn="Age", xlabIn="Geographic Mobility within the Last Year", title="Age by Geographic Mobility", colIn="blue", fileNP="AgeGeoMob.png")
#EXTRA FEATURE 4:  income by geographic mobility
barGraph(tableIn="B07011", rangeA=2, rangeB=6, namesVec=c("Same House", "Same County", "Same State", "Different State", "From Abroad"), ylabIn="Income", xlabIn="Geographic Mobility within the Last Year", title="Median Income by Geographic Mobility", colIn="darkgreen", fileNP="IncGeoMob.png")
#EXTRA FEATURE 5: marriage age and divorces
mapGraph("B12007", "Median Age at First Marriage (Men) by State", "MenFirMar.png", "Median Age", 1)
mapGraph("B12007", "Median Age at First Marriage (Women) by State", "WomFirMar.png", "Median Age", 2)
mapGraphPop("B12503", "Number of Divorces by State Normalized by State Population", "div.png", "Proportion", 1)
mapGraphPop("B12503", "Divorces Normalized by State Population", "div.png", "Proportion", 1)
l=c(5, 4, 3)
s=c(1,2,3)
c(l,s)
new_df[4,2]
new_df <- data.frame(X=101:110,Y=seq(from=51,by=2.5,length=10))
new_df
new_df[1]
matrix
filenames = c("PAL003DCM1.csv","PAL006DCM1.csv","PAL007DCM1.csv","PAL014DCM1.csv","PAL015DCM1.csv",
"PAL017DCM1.csv","PAL018DCM1.csv","PAL019D3.csv","PAL029DCM1.csv","PAL042D2.csv","PAL043DCM1.csv",
"PAL044DCM1.csv","PAL045DCM1.csv","PAL048DCM1.csv","PAL050D1.csv","PAL052D1.csv",
"PAL052D2.csv","PAL130D1.csv","PAL131D1.csv","PAL133D1.csv","PAL134D1.csv","PAL137DCM1.csv",
"PAL227D1.csv","PAL247DCM1.csv","PAL248D1.csv","PAL250D1.csv","PAL250D2.csv","PAL252DCM1.csv",
"PAL270D1.csv","PAL299DCM1.csv","PAL300D1.csv","PAL301D1.csv","PAL302D1.csv","PAL306D1.csv","PAL307DCM1.csv",
"PAL332D1.csv","PAL333D1.csv","PAL334D1.csv","PAL340D1.csv","PAL355D1.csv","PAL356D1.csv","PAL359D1.csv",
"PAL362D1.csv","PAL374DCM1.csv","PAL375D1.csv","PAL378DCM1.csv","PAL379DCM1.csv","PAL382DCM1.csv")
PAL003DCM1 = read.csv(filenames[1],header=FALSE)
PAL006DCM1 = read.csv(filenames[2],header=FALSE)
PAL007DCM1 = read.csv(filenames[3],header=FALSE)
PAL014DCM1 = read.csv(filenames[4],header=FALSE)
PAL015DCM1 = read.csv(filenames[5],header=FALSE)
PAL017DCM1 = read.csv(filenames[6],header=FALSE)
PAL018DCM1 = read.csv(filenames[7],header=FALSE)
PAL019DCM1 = read.csv(filenames[8],header=FALSE)
PAL029DCM1 = read.csv(filenames[9],header=FALSE)
PAL042DCM1 = read.csv(filenames[10],header=FALSE)
PAL043DCM1 = read.csv(filenames[11],header=FALSE)
PAL044DCM1 = read.csv(filenames[12],header=FALSE)
PAL045DCM1 = read.csv(filenames[13],header=FALSE)
PAL048DCM1 = read.csv(filenames[14],header=FALSE)
PAL050DCM1 = read.csv(filenames[15],header=FALSE)
PAL052DCM1 = read.csv(filenames[16],header=FALSE)
#PAL052DCM2 = read.csv(filenames[17],header=FALSE) Broad peak @ 15.8 looked less like rest of data. Use D1.
PAL130DCM1 = read.csv(filenames[18],header=FALSE)
PAL131DCM1 = read.csv(filenames[19],header=FALSE)
PAL133DCM1 = read.csv(filenames[20],header=FALSE)
PAL134DCM1 = read.csv(filenames[21],header=FALSE)
PAL137DCM1 = read.csv(filenames[22],header=FALSE)
PAL227DCM1 = read.csv(filenames[23],header=FALSE)
PAL247DCM1 = read.csv(filenames[24],header=FALSE)
PAL248DCM1 = read.csv(filenames[25],header=FALSE)
PAL250DCM1 = read.csv(filenames[26],header=FALSE)
#PAL250D2 = read.csv(filenames[27],header=FALSE)  Graph 250D2 looked the same as 052D2. Use D1.
PAL252DCM1 = read.csv(filenames[28],header=FALSE)
PAL270DCM1 = read.csv(filenames[29],header=FALSE)
PAL299DCM1 = read.csv(filenames[30],header=FALSE)
PAL300DCM1 = read.csv(filenames[31],header=FALSE)
PAL301DCM1 = read.csv(filenames[32],header=FALSE)
PAL302DCM1 = read.csv(filenames[33],header=FALSE)
PAL306DCM1 = read.csv(filenames[34],header=FALSE)
PAL307DCM1 = read.csv(filenames[35],header=FALSE)
PAL332DCM1 = read.csv(filenames[36],header=FALSE)
PAL333DCM1 = read.csv(filenames[37],header=FALSE)
PAL334DCM1 = read.csv(filenames[38],header=FALSE)
PAL340DCM1 = read.csv(filenames[39],header=FALSE)
PAL355DCM1 = read.csv(filenames[40],header=FALSE)
PAL356DCM1 = read.csv(filenames[41],header=FALSE)
PAL359DCM1 = read.csv(filenames[42],header=FALSE)
PAL362DCM1 = read.csv(filenames[43],header=FALSE)
PAL374DCM1 = read.csv(filenames[44],header=FALSE)
PAL375DCM1 = read.csv(filenames[45],header=FALSE)
PAL378DCM1 = read.csv(filenames[46],header=FALSE)
PAL379DCM1 = read.csv(filenames[47],header=FALSE)
PAL382DCM1 = read.csv(filenames[48],header=FALSE)
dataframe1 = rbind(
#clade F
c(003,"DCM","F",  as.numeric(PAL003DCM1[,2]) ),
c(006,"DCM","F",  as.numeric(PAL006DCM1[-77002,2]) ),
c(007,"DCM","F",  as.numeric(PAL007DCM1[,2]) ),
c(014,"DCM","F",  as.numeric(PAL014DCM1[-77002,2]) ),
c(015,"DCM","F",  as.numeric(PAL015DCM1[-77002,2]) ),
c(017,"DCM","F",  as.numeric(PAL017DCM1[,2]) ),
c(018,"DCM","F",  as.numeric(PAL018DCM1[,2]) ),
c(043,"DCM","F",  as.numeric(PAL043DCM1[,2]) ),
c(044,"DCM","F",  as.numeric(PAL044DCM1[-77002,2]) ),
c(048,"DCM","F",  as.numeric(PAL048DCM1[,2]) ),
c(050,"DCM","F",  as.numeric(PAL050DCM1[,2]) ),
c(130,"DCM","F",  as.numeric(PAL130DCM1[,2]) ),
c(131,"DCM","F",  as.numeric(PAL131DCM1[,2]) ),
c(133,"DCM","F",  as.numeric(PAL133DCM1[-77002,2]) ),
c(134,"DCM","F",  as.numeric(PAL134DCM1[,2]) ),
c(248,"DCM","F",  as.numeric(PAL248DCM1[,2]) ),
c(270,"DCM","F",  as.numeric(PAL270DCM1[,2]) ),
c(302,"DCM","F",  as.numeric(PAL302DCM1[-77002,2]) ),
c(333,"DCM","F",  as.numeric(PAL333DCM1[-77002,2]) ),
c(334,"DCM","F",  as.numeric(PAL334DCM1[,2]) ),
c(374,"DCM","F",  as.numeric(PAL374DCM1[,2]) ),
c(378,"DCM","F",  as.numeric(PAL378DCM1[,2]) ),
c(382,"DCM","F",  as.numeric(PAL382DCM1[,2]) ),
c(227,"DCM","F",  as.numeric(PAL227DCM1[,2]) ),
#clade D
c(029,"DCM","D",  as.numeric(PAL029DCM1[,2]) ),
c(247,"DCM","D",  as.numeric(PAL247DCM1[-77002,2]) ),
c(252,"DCM","D",  as.numeric(PAL252DCM1[,2]) ),
c(299,"DCM","D",  as.numeric(PAL299DCM1[-77002,2]) ),
c(300,"DCM","D",  as.numeric(PAL300DCM1[-77002,2]) ),
c(306,"DCM","D",  as.numeric(PAL306DCM1[,2]) ),
c(332,"DCM","D",  as.numeric(PAL332DCM1[-77002,2]) ),
c(340,"DCM","D",  as.numeric(PAL340DCM1[-77002,2]) ),
c(355,"DCM","D",  as.numeric(PAL355DCM1[-77002,2]) ),
c(359,"DCM","D",  as.numeric(PAL359DCM1[,2]) ),
#Trocheliophorum
c(019,"DCM","T",  as.numeric(PAL019DCM1[,2]) ),
c(042,"DCM","T",  as.numeric(PAL042DCM1[-77002,2]) ),
c(045,"DCM","T",  as.numeric(PAL045DCM1[,2]) ),
c(052,"DCM","T",  as.numeric(PAL052DCM1[,2]) ),
c(137,"DCM","T",  as.numeric(PAL137DCM1[,2]) ),
c(250,"DCM","T",  as.numeric(PAL250DCM1[,2]) ),
c(301,"DCM","T",  as.numeric(PAL301DCM1[-77002,2]) ),
c(307,"DCM","T",  as.numeric(PAL307DCM1[,2]) ),
c(356,"DCM","T",  as.numeric(PAL356DCM1[,2]) ),
c(362,"DCM","T",  as.numeric(PAL362DCM1[,2]) ),
c(375,"DCM","T",  as.numeric(PAL375DCM1[,2]) ),
c(379,"DCM","T",  as.numeric(PAL379DCM1[,2]) )
)
#plots of original time data with bin lines shown
#xadj is the amount by which we push the label of the bin over from the line
#yheight is the heigh at which the bin labels are displayed
#binWidth
drawPlotBinLines <- function(row, binWidth, xadj=(0.000175*binWidth), yheight=floor(max(as.numeric(dataframe1[row, 15000:62004]))), charSize=1){
times = seq(1,26.6667, DELTA)
a=seq(6, 6+(62004-15000)*DELTA,binWidth*DELTA)
a=a[-length(a)]
b=rep(yheight,length(a))
plot(dataframe1[row,15000:62004],pch=20,col="white",xlim=c(5,21.6667),xlab="Time (min)",ylab="Intensity",frame=FALSE, main=paste("Sample", as.character(dataframe1[row,1])) )
lines(times[15000:62004],dataframe1[row, 15000:62004],lwd=2)
abline(v=seq(6, 6+(62004-15000)*DELTA,binWidth*DELTA), col="steelblue1")
text(x=a+xadj, y=b,labels=as.character(c(1:length(b))),col="grey42", cex=charSize)
}
getwd()
dir()
setwd("Coral Project")
dir()
setwd("2016 Raw Data\All DCM")
setwd("2016 Raw Data/All DCM")
PAL003DCM1 = read.csv(filenames[1],header=FALSE)
PAL006DCM1 = read.csv(filenames[2],header=FALSE)
PAL007DCM1 = read.csv(filenames[3],header=FALSE)
PAL014DCM1 = read.csv(filenames[4],header=FALSE)
PAL015DCM1 = read.csv(filenames[5],header=FALSE)
PAL017DCM1 = read.csv(filenames[6],header=FALSE)
PAL018DCM1 = read.csv(filenames[7],header=FALSE)
PAL019DCM1 = read.csv(filenames[8],header=FALSE)
PAL029DCM1 = read.csv(filenames[9],header=FALSE)
PAL042DCM1 = read.csv(filenames[10],header=FALSE)
PAL043DCM1 = read.csv(filenames[11],header=FALSE)
PAL044DCM1 = read.csv(filenames[12],header=FALSE)
PAL045DCM1 = read.csv(filenames[13],header=FALSE)
PAL048DCM1 = read.csv(filenames[14],header=FALSE)
PAL050DCM1 = read.csv(filenames[15],header=FALSE)
PAL052DCM1 = read.csv(filenames[16],header=FALSE)
#PAL052DCM2 = read.csv(filenames[17],header=FALSE) Broad peak @ 15.8 looked less like rest of data. Use D1.
PAL130DCM1 = read.csv(filenames[18],header=FALSE)
PAL131DCM1 = read.csv(filenames[19],header=FALSE)
PAL133DCM1 = read.csv(filenames[20],header=FALSE)
PAL134DCM1 = read.csv(filenames[21],header=FALSE)
PAL137DCM1 = read.csv(filenames[22],header=FALSE)
PAL227DCM1 = read.csv(filenames[23],header=FALSE)
PAL247DCM1 = read.csv(filenames[24],header=FALSE)
PAL248DCM1 = read.csv(filenames[25],header=FALSE)
PAL250DCM1 = read.csv(filenames[26],header=FALSE)
#PAL250D2 = read.csv(filenames[27],header=FALSE)  Graph 250D2 looked the same as 052D2. Use D1.
PAL252DCM1 = read.csv(filenames[28],header=FALSE)
PAL270DCM1 = read.csv(filenames[29],header=FALSE)
PAL299DCM1 = read.csv(filenames[30],header=FALSE)
PAL300DCM1 = read.csv(filenames[31],header=FALSE)
PAL301DCM1 = read.csv(filenames[32],header=FALSE)
PAL302DCM1 = read.csv(filenames[33],header=FALSE)
PAL306DCM1 = read.csv(filenames[34],header=FALSE)
PAL307DCM1 = read.csv(filenames[35],header=FALSE)
PAL332DCM1 = read.csv(filenames[36],header=FALSE)
PAL333DCM1 = read.csv(filenames[37],header=FALSE)
PAL334DCM1 = read.csv(filenames[38],header=FALSE)
PAL340DCM1 = read.csv(filenames[39],header=FALSE)
PAL355DCM1 = read.csv(filenames[40],header=FALSE)
PAL356DCM1 = read.csv(filenames[41],header=FALSE)
PAL359DCM1 = read.csv(filenames[42],header=FALSE)
PAL362DCM1 = read.csv(filenames[43],header=FALSE)
PAL374DCM1 = read.csv(filenames[44],header=FALSE)
PAL375DCM1 = read.csv(filenames[45],header=FALSE)
PAL378DCM1 = read.csv(filenames[46],header=FALSE)
PAL379DCM1 = read.csv(filenames[47],header=FALSE)
PAL382DCM1 = read.csv(filenames[48],header=FALSE)
dataframe1 = rbind(
#clade F
c(003,"DCM","F",  as.numeric(PAL003DCM1[,2]) ),
c(006,"DCM","F",  as.numeric(PAL006DCM1[-77002,2]) ),
c(007,"DCM","F",  as.numeric(PAL007DCM1[,2]) ),
c(014,"DCM","F",  as.numeric(PAL014DCM1[-77002,2]) ),
c(015,"DCM","F",  as.numeric(PAL015DCM1[-77002,2]) ),
c(017,"DCM","F",  as.numeric(PAL017DCM1[,2]) ),
c(018,"DCM","F",  as.numeric(PAL018DCM1[,2]) ),
c(043,"DCM","F",  as.numeric(PAL043DCM1[,2]) ),
c(044,"DCM","F",  as.numeric(PAL044DCM1[-77002,2]) ),
c(048,"DCM","F",  as.numeric(PAL048DCM1[,2]) ),
c(050,"DCM","F",  as.numeric(PAL050DCM1[,2]) ),
c(130,"DCM","F",  as.numeric(PAL130DCM1[,2]) ),
c(131,"DCM","F",  as.numeric(PAL131DCM1[,2]) ),
c(133,"DCM","F",  as.numeric(PAL133DCM1[-77002,2]) ),
c(134,"DCM","F",  as.numeric(PAL134DCM1[,2]) ),
c(248,"DCM","F",  as.numeric(PAL248DCM1[,2]) ),
c(270,"DCM","F",  as.numeric(PAL270DCM1[,2]) ),
c(302,"DCM","F",  as.numeric(PAL302DCM1[-77002,2]) ),
c(333,"DCM","F",  as.numeric(PAL333DCM1[-77002,2]) ),
c(334,"DCM","F",  as.numeric(PAL334DCM1[,2]) ),
c(374,"DCM","F",  as.numeric(PAL374DCM1[,2]) ),
c(378,"DCM","F",  as.numeric(PAL378DCM1[,2]) ),
c(382,"DCM","F",  as.numeric(PAL382DCM1[,2]) ),
c(227,"DCM","F",  as.numeric(PAL227DCM1[,2]) ),
#clade D
c(029,"DCM","D",  as.numeric(PAL029DCM1[,2]) ),
c(247,"DCM","D",  as.numeric(PAL247DCM1[-77002,2]) ),
c(252,"DCM","D",  as.numeric(PAL252DCM1[,2]) ),
c(299,"DCM","D",  as.numeric(PAL299DCM1[-77002,2]) ),
c(300,"DCM","D",  as.numeric(PAL300DCM1[-77002,2]) ),
c(306,"DCM","D",  as.numeric(PAL306DCM1[,2]) ),
c(332,"DCM","D",  as.numeric(PAL332DCM1[-77002,2]) ),
c(340,"DCM","D",  as.numeric(PAL340DCM1[-77002,2]) ),
c(355,"DCM","D",  as.numeric(PAL355DCM1[-77002,2]) ),
c(359,"DCM","D",  as.numeric(PAL359DCM1[,2]) ),
#Trocheliophorum
c(019,"DCM","T",  as.numeric(PAL019DCM1[,2]) ),
c(042,"DCM","T",  as.numeric(PAL042DCM1[-77002,2]) ),
c(045,"DCM","T",  as.numeric(PAL045DCM1[,2]) ),
c(052,"DCM","T",  as.numeric(PAL052DCM1[,2]) ),
c(137,"DCM","T",  as.numeric(PAL137DCM1[,2]) ),
c(250,"DCM","T",  as.numeric(PAL250DCM1[,2]) ),
c(301,"DCM","T",  as.numeric(PAL301DCM1[-77002,2]) ),
c(307,"DCM","T",  as.numeric(PAL307DCM1[,2]) ),
c(356,"DCM","T",  as.numeric(PAL356DCM1[,2]) ),
c(362,"DCM","T",  as.numeric(PAL362DCM1[,2]) ),
c(375,"DCM","T",  as.numeric(PAL375DCM1[,2]) ),
c(379,"DCM","T",  as.numeric(PAL379DCM1[,2]) )
)
drawPlotBinLines <- function(row, binWidth, xadj=(0.000175*binWidth), yheight=floor(max(as.numeric(dataframe1[row, 15000:62004]))), charSize=1){
times = seq(1,26.6667, DELTA)
a=seq(6, 6+(62004-15000)*DELTA,binWidth*DELTA)
a=a[-length(a)]
b=rep(yheight,length(a))
plot(dataframe1[row,15000:62004],pch=20,col="white",xlim=c(5,21.6667),xlab="Time (min)",ylab="Intensity",frame=FALSE, main=paste("Sample", as.character(dataframe1[row,1])) )
lines(times[15000:62004],dataframe1[row, 15000:62004],lwd=2)
abline(v=seq(6, 6+(62004-15000)*DELTA,binWidth*DELTA), col="steelblue1")
text(x=a+xadj, y=b,labels=as.character(c(1:length(b))),col="grey42", cex=charSize)
}
drawPlotBinLines(1, 2000)
DELTA = 0.00033333333333
drawPlotBinLines <- function(row, binWidth, xadj=(0.000175*binWidth), yheight=floor(max(as.numeric(dataframe1[row, 15000:62004]))), charSize=1){
times = seq(1,26.6667, DELTA)
a=seq(6, 6+(62004-15000)*DELTA,binWidth*DELTA)
a=a[-length(a)]
b=rep(yheight,length(a))
plot(dataframe1[row,15000:62004],pch=20,col="white",xlim=c(5,21.6667),xlab="Time (min)",ylab="Intensity",frame=FALSE, main=paste("Sample", as.character(dataframe1[row,1])) )
lines(times[15000:62004],dataframe1[row, 15000:62004],lwd=2)
abline(v=seq(6, 6+(62004-15000)*DELTA,binWidth*DELTA), col="steelblue1")
text(x=a+xadj, y=b,labels=as.character(c(1:length(b))),col="grey42", cex=charSize)
}
drawPlotBinLines(1, 2000)
drawPlotBinLines(1, 1100)
drawPlotBinLines(1, 3000)
for(i in 1:46){
png(filename=paste("PlotDMC_",as.character(i), ".png", sep=""), height=250, width=650, bg="white")
drawPlotBinLines(i, 2000)
dev.off()
}
for(i in 1:46){
png(filename=paste("BinPlotDMC_",as.character(i), ".png", sep=""), height=250, width=650, bg="white")
drawPlotBinLines(i, 2000)
dev.off()
}
drawPlotBinLines(23, 1400)
drawPlotBinLines(1, 2000, TRUE)
drawPlotBinLines(1, 2000)
drawPlotBinLines(1, 2000, TRUE)
drawPlotBinLines <- function(row, binWidth, xadj=(0.000175*binWidth), yheight=floor(max(as.numeric(dataframe1[row, 15000:62004]))), charSize=1, binLabels=FALSE){
times = seq(1,26.6667, DELTA)
a=seq(6, 6+(62004-15000)*DELTA,binWidth*DELTA)
a=a[-length(a)]
b=rep(yheight,length(a))
plot(dataframe1[row,15000:62004],pch=20,col="white",xlim=c(5,21.6667),xlab="Time (min)",ylab="Intensity",frame=FALSE, main=paste("Sample", as.character(dataframe1[row,1])) )
lines(times[15000:62004],dataframe1[row, 15000:62004],lwd=2)
abline(v=seq(6, 6+(62004-15000)*DELTA,binWidth*DELTA), col="steelblue1")
if(binLabels){
text(x=a+xadj, y=b,labels=as.character(c(1:length(b))),col="grey42", cex=charSize)
}
}
drawPlotBinLines(1, 2000, TRUE)
drawPlotBinLines(1, 2000, FALSE)
drawPlotBinLines(1, 2000, binLabels=TRUE)
drawPlotBinLines(1, 2000)
drawPlotBinLines(1, 2000, binLabels=FALSE)
drawPlotBinLines(1, 2000, binLabels=TRUE)
for(i in 2:46){
png(filename=paste("BinPlotDMC_",as.character(i), ".png", sep=""), height=250, width=650, bg="white")
drawPlotBinLines(i, 2000)
dev.off()
}
png(filename=paste("BinPlotDMC_",as.character(i), ".png", sep=""), height=250, width=650, bg="white")
drawPlotBinLines(1, 2000, binLabels=TRUE)
dev.off()
dev.off()
png(filename=paste("BinPlotDMC_",as.character(i), ".png", sep=""), height=250, width=650, bg="white")
drawPlotBinLines(1, 2000, binLabels=TRUE)
dev.off()
for(i in 2:46){
png(filename=paste("BinPlotDMC_",as.character(i), ".png", sep=""), height=250, width=650, bg="white")
drawPlotBinLines(i, 2000)
dev.off()
}
png(filename=paste("BinPlotDMC_25.png", sep=""), height=250, width=650, bg="white")
drawPlotBinLines(25, 2000, binLabels=TRUE)
dev.off()
png(filename=paste("BinPlotDMC_13.png", sep=""), height=250, width=650, bg="white")
drawPlotBinLines(13, 2000, binLabels=TRUE)
dev.off()
for(i in 2:46){
png(filename=paste("BinPlotDMC_",as.character(i), ".png", sep=""), height=250, width=650, bg="white")
drawPlotBinLines(i, 1100)
dev.off()
}
png(filename=paste("BinPlotDMC_",as.character(i), ".png", sep=""), height=250, width=650, bg="white")
drawPlotBinLines(1, 1100, binLabels=TRUE)
dev.off()
png(filename=paste("BinPlotDMC_25.png", sep=""), height=250, width=650, bg="white")
drawPlotBinLines(25, 1100, binLabels=TRUE)
dev.off()
png(filename=paste("BinPlotDMC_13.png", sep=""), height=250, width=650, bg="white")
drawPlotBinLines(13, 1100, binLabels=TRUE)
dev.off()
drawPlotBinLines(1, 1100, binLabels=TRUE)
for(i in 2:46){
png(filename=paste("BinPlotDMC_",as.character(i), ".png", sep=""), height=250, width=650, bg="white")
drawPlotBinLines(i, 1100, charSize = .5)
dev.off()
}
png(filename=paste("BinPlotDMC_",as.character(i), ".png", sep=""), height=250, width=650, bg="white")
drawPlotBinLines(1, 1100, binLabels=TRUE, charSize = .5)
dev.off()
png(filename=paste("BinPlotDMC_25.png", sep=""), height=250, width=650, bg="white")
drawPlotBinLines(25, 1100, binLabels=TRUE)
dev.off()
png(filename=paste("BinPlotDMC_13.png", sep=""), height=250, width=650, bg="white")
drawPlotBinLines(13, 1100, binLabels=TRUE, charSize = .5)
dev.off()
for(i in 2:46){
png(filename=paste("BinPlotDMC_",as.character(i), ".png", sep=""), height=250, width=650, bg="white")
drawPlotBinLines(i, 1100, charSize = .5)
dev.off()
}
png(filename=paste("BinPlotDMC_",as.character(i), ".png", sep=""), height=250, width=650, bg="white")
drawPlotBinLines(1, 1100, binLabels=TRUE, charSize = .5)
dev.off()
png(filename=paste("BinPlotDMC_25.png", sep=""), height=250, width=650, bg="white")
drawPlotBinLines(25, 1100, binLabels=TRUE)
dev.off()
png(filename=paste("BinPlotDMC_13.png", sep=""), height=250, width=650, bg="white")
drawPlotBinLines(13, 1100, binLabels=TRUE, charSize = .5)
dev.off()
dev.off()
for(i in 2:46){
png(filename=paste("BinPlotDMC_",as.character(i), ".png", sep=""), height=250, width=650, bg="white")
drawPlotBinLines(i, 1100, charSize = .5)
dev.off()
}
png(filename=paste("BinPlotDMC_",as.character(i), ".png", sep=""), height=250, width=650, bg="white")
drawPlotBinLines(1, 1100, binLabels=TRUE, charSize = .5)
dev.off()
png(filename=paste("BinPlotDMC_25.png", sep=""), height=250, width=650, bg="white")
drawPlotBinLines(25, 1100, binLabels=TRUE)
dev.off()
png(filename=paste("BinPlotDMC_13.png", sep=""), height=250, width=650, bg="white")
drawPlotBinLines(13, 1100, binLabels=TRUE, charSize = .5)
dev.off()
drawPlotBinLines(1, 1100, binLabels=TRUE, charSize = .5)
png(filename=paste("BinPlotDMC_1", ".png", sep=""), height=250, width=650, bg="white")
drawPlotBinLines(1, 1100, binLabels=TRUE, charSize = .5)
dev.off()
1100*DELTA
png(filename=paste("BinPlotDMC_13.png", sep=""), height=250, width=650, bg="white")
drawPlotBinLines(13, 1100, binLabels=TRUE, charSize = .5)
dev.off()
drawPlotBinLines(13, 1100, binLabels=TRUE, charSize = .5)
png(filename=paste("BinPlotDMC_25.png", sep=""), height=250, width=650, bg="white")
drawPlotBinLines(25, 1100, binLabels=TRUE, charSize = .5)
dev.off()
drawPlotBinLines(25, 1100, binLabels=TRUE, charSize = .5)
for(i in 2:46){
png(filename=paste("BinPlotDMC_",as.character(i), ".png", sep=""), height=250, width=650, bg="white")
drawPlotBinLines(i, 3000)
dev.off()
}
png(filename=paste("BinPlotDMC_1", ".png", sep=""), height=250, width=650, bg="white")
drawPlotBinLines(1, 3000, binLabels=TRUE)
dev.off()
png(filename=paste("BinPlotDMC_25.png", sep=""), height=250, width=650, bg="white")
drawPlotBinLines(25, 3000, binLabels=TRUE)
dev.off()
png(filename=paste("BinPlotDMC_13.png", sep=""), height=250, width=650, bg="white")
drawPlotBinLines(13, 3000, binLabels=TRUE)
dev.off()
getwd()
