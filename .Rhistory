mapGraph("B02001", "Native Hawaiian and Other Pacific Islander Percent of State Population", "HAIslanderPopMap.png", "Percent", 6, TRUE)
#QUESTION 2: foreign born speak english and spanish well
mapGraph("B16005", "Number of Foreign Born Individuals Who Speak English and Spanish Very Well by State", "SpanEngFBPop.png", "Population", 27)
#QUESTION 3: Median Income by Place of Birth
medianIncomeBirth("MedIncBirthPlace.png")
#EXTRA FEATURE 1: public assistance by state
mapGraph("B09010", "Percent of State Population Receiving Public Assistance", "Assist.png", "Percent", 2, TRUE)
#EXTRA FEATURE 2:  tranpsortation
barGraph(tableIn="B08121", rangeA=2, rangeB=7, namesVec=c("Drove Alone", "Carpooled", "Public Transport", "Walked", "Other Transport", "Worked at Home"), ylabIn="Median Income ($)", xlabIn="Mode of Transportation to Work", title="Median Income by Mode of Transportation", colIn="red", fileName="MedIncTrans.png")
#EXTRA FEATURE 3:  age by geographic mobility
barGraph(tableIn="B07002",rangeA=2, rangeB=6, namesVec=c("Same House", "Same County", "Same State", "Different State", "From Abroad"), ylabIn="Age", xlabIn="Geographic Mobility within the Last Year", title="Age by Geographic Mobility", colIn="blue", fileName="AgeGeoMob.png")
#EXTRA FEATURE 4:  income by geographic mobility
barGraph(tableIn="B07011", rangeA=2, rangeB=6, namesVec=c("Same House", "Same County", "Same State", "Different State", "From Abroad"), ylabIn="Income", xlabIn="Geographic Mobility within the Last Year", title="Median Income by Geographic Mobility", colIn="darkgreen", fileName="IncGeoMob.png")
#EXTRA FEATURE 5: marriage age and divorces
mapGraph("B12007", "Median Age at First Marriage (Men) by State", "MenFirMar.png", "Median Age", 1)
mapGraph("B12007", "Median Age at First Marriage (Women) by State", "WomFirMar.png", "Median Age", 2)
mapGraphPop("B12503", "Number of Divorces by State Normalized by State Population", "div.png", "Proportion", 1)
source('~/133/project3.R', echo=TRUE)
source('~/133/project3.R', echo=TRUE)
mapGraph("B02001", "Asian Percent of State Population", "AsianPopMap.png", "Percent Asian", 5, TRUE)
barGraph <- function(tableIn, rangeA=NA, rangeB=NA, namesVec, ylabIn, xlabIn, title, colIn, fileNP){
#fileNP = paste("133/FinalProjectPlots/", fileName)
png(file=fileNP, height=400, width=750,bg="white")
data = estimate(acs.fetch(endyear=2014, span = 5, geography=geo.make(1), table.number=tableIn,  dataset = "acs",  col.names = "pretty", key="acf32fbd72b49ffb807e95c80948b75fb179f30e"))
if(!is.na(rangeA) && !is.na(rangeB)){
data = data[rangeA:rangeB]
}
print(barplot(data, names.arg=namesVec, ylab=ylabIn, xlab=xlabIn, main=title, col=colIn))
dev.off()
}
medianIncomeBirth <- function(fileNP){
#fileNP=paste("133/FinalProjectPlots/", fileName)
png(file=fileNP, height=350, width=600,bg="white")
birthIncome = estimate(acs.fetch(endyear=2014, span = 5, geography=geo.make(1), table.number="B06010",  dataset = "acs",  col.names = "pretty", key="acf32fbd72b49ffb807e95c80948b75fb179f30e"))
native = birthIncome[37:44]
foreign = birthIncome[48:55]
normNative = native/sum(native)
normForeign = foreign/sum(foreign)
incomeBorn = matrix(c(normdf6, normdf7), nrow=2, ncol=8, byrow = TRUE)
print(barplot(incomeBorn, beside=TRUE, names.arg=c("10","", "10-15", "", "15-25","", "25-35","", "35-50","", "50-65","","65-75","", "75+",""), legend.text = c("Native", "Foreign"), ylab="Percent Frequency", xlab="Median Income (In Thousands)", col = c("darkgreen", "darkblue"), main="Percent Frequency of Income Bracket for Native and Foreign Born Residents"))
dev.off()
}
mapGraph("B02001", "Asian Percent of State Population", "AsianPopMap.png", "Percent Asian", 5, TRUE)
require(acs)
require(choroplethr)
api.key.install("acf32fbd72b49ffb807e95c80948b75fb179f30e")
mapGraph <- function(table, titleIn, fileNP, legendTitle, colIn, norm=FALSE){
#fileNP = paste("133/FinalProjectPlots/", fileName)
png(filename=fileNP, height=250, width=650,bg="white")
df = get_acs_data(table, "state", column_idx = colIn)[[1]]
if(norm==TRUE){
dfNorm = get_acs_data(table, "state", column_idx = 1)[[1]]
df$value = (df$value / dfNorm$value) * 100
}
print(state_choropleth(df, title = titleIn, legend=legendTitle))
dev.off()
}
mapGraphPop <- function(table, titleIn, fileNP, legendTitle, colIn){
#fileNP = paste("133/FinalProjectPlots/", fileName)
png(filename=fileNP, height=250, width=550,bg="white")
dfPop = get_acs_data("B02001", "state", column_idx = 1)[[1]]
df = get_acs_data(table, "state", column_idx = colIn)[[1]]
df$value = (df$value / dfPop$value)
print(state_choropleth(df, title = titleIn, legend=legendTitle))
dev.off()
}
barGraph <- function(tableIn, rangeA=NA, rangeB=NA, namesVec, ylabIn, xlabIn, title, colIn, fileNP){
#fileNP = paste("133/FinalProjectPlots/", fileName)
png(file=fileNP, height=400, width=750,bg="white")
data = estimate(acs.fetch(endyear=2014, span = 5, geography=geo.make(1), table.number=tableIn,  dataset = "acs",  col.names = "pretty", key="acf32fbd72b49ffb807e95c80948b75fb179f30e"))
if(!is.na(rangeA) && !is.na(rangeB)){
data = data[rangeA:rangeB]
}
print(barplot(data, names.arg=namesVec, ylab=ylabIn, xlab=xlabIn, main=title, col=colIn))
dev.off()
}
medianIncomeBirth <- function(fileNP){
#fileNP=paste("133/FinalProjectPlots/", fileName)
png(file=fileNP, height=350, width=600,bg="white")
birthIncome = estimate(acs.fetch(endyear=2014, span = 5, geography=geo.make(1), table.number="B06010",  dataset = "acs",  col.names = "pretty", key="acf32fbd72b49ffb807e95c80948b75fb179f30e"))
native = birthIncome[37:44]
foreign = birthIncome[48:55]
normNative = native/sum(native)
normForeign = foreign/sum(foreign)
incomeBorn = matrix(c(normdf6, normdf7), nrow=2, ncol=8, byrow = TRUE)
print(barplot(incomeBorn, beside=TRUE, names.arg=c("10","", "10-15", "", "15-25","", "25-35","", "35-50","", "50-65","","65-75","", "75+",""), legend.text = c("Native", "Foreign"), ylab="Percent Frequency", xlab="Median Income (In Thousands)", col = c("darkgreen", "darkblue"), main="Percent Frequency of Income Bracket for Native and Foreign Born Residents"))
dev.off()
}
#QUESTION 1: Race by State
mapGraph("B02001", "Total Population by State", "TotalPopMap.png", "Population", 1)
mapGraph("B02001", "White Percent of State Population", "WhitePopMap.png", "Percent White", 2, TRUE)
mapGraph("B02001", "Black or African American Percent of State Population", "BlackPopMap.png", "Percent Black", 3, TRUE)
mapGraph("B02001", "American Indian and Alaska Native Percent of State Population", "NativePopMap.png", "Percent Native", 4, TRUE)
mapGraph("B02001", "Asian Percent of State Population", "AsianPopMap.png", "Percent Asian", 5, TRUE)
mapGraph("B02001", "Native Hawaiian and Other Pacific Islander Percent of State Population", "HAIslanderPopMap.png", "Percent", 6, TRUE)
#QUESTION 2: foreign born speak english and spanish well
mapGraph("B16005", "Number of Foreign Born Individuals Who Speak English and Spanish Very Well by State", "SpanEngFBPop.png", "Population", 27)
#QUESTION 3: Median Income by Place of Birth
medianIncomeBirth("MedIncBirthPlace.png")
#EXTRA FEATURE 1: public assistance by state
mapGraph("B09010", "Percent of State Population Receiving Public Assistance", "Assist.png", "Percent", 2, TRUE)
#EXTRA FEATURE 2:  tranpsortation
barGraph(tableIn="B08121", rangeA=2, rangeB=7, namesVec=c("Drove Alone", "Carpooled", "Public Transport", "Walked", "Other Transport", "Worked at Home"), ylabIn="Median Income ($)", xlabIn="Mode of Transportation to Work", title="Median Income by Mode of Transportation", colIn="red", fileNP="MedIncTrans.png")
#EXTRA FEATURE 3:  age by geographic mobility
barGraph(tableIn="B07002",rangeA=2, rangeB=6, namesVec=c("Same House", "Same County", "Same State", "Different State", "From Abroad"), ylabIn="Age", xlabIn="Geographic Mobility within the Last Year", title="Age by Geographic Mobility", colIn="blue", fileNP="AgeGeoMob.png")
#EXTRA FEATURE 4:  income by geographic mobility
barGraph(tableIn="B07011", rangeA=2, rangeB=6, namesVec=c("Same House", "Same County", "Same State", "Different State", "From Abroad"), ylabIn="Income", xlabIn="Geographic Mobility within the Last Year", title="Median Income by Geographic Mobility", colIn="darkgreen", fileNP="IncGeoMob.png")
#EXTRA FEATURE 5: marriage age and divorces
mapGraph("B12007", "Median Age at First Marriage (Men) by State", "MenFirMar.png", "Median Age", 1)
mapGraph("B12007", "Median Age at First Marriage (Women) by State", "WomFirMar.png", "Median Age", 2)
mapGraphPop("B12503", "Number of Divorces by State Normalized by State Population", "div.png", "Proportion", 1)
mapGraphPop("B12503", "Divorces Normalized by State Population", "div.png", "Proportion", 1)
l=c(5, 4, 3)
s=c(1,2,3)
c(l,s)
new_df[4,2]
new_df <- data.frame(X=101:110,Y=seq(from=51,by=2.5,length=10))
new_df
new_df[1]
matrix
18 + 8 + 7
?dist
setwd("~/CoralProject")
filenamesDCM = c("PAL003DCM1.csv","PAL006DCM1.csv","PAL007DCM1.csv","PAL014DCM1.csv","PAL015DCM1.csv",
"PAL017DCM1.csv","PAL018DCM1.csv","PAL019D3.csv","PAL029DCM1.csv","PAL042D2.csv","PAL043DCM1.csv",
"PAL044DCM1.csv","PAL045DCM1.csv","PAL048DCM1.csv","PAL050D1.csv","PAL052D1.csv",
"PAL052D2.csv","PAL130D1.csv","PAL131D1.csv","PAL133D1.csv","PAL134D1.csv","PAL137DCM1.csv",
"PAL227D1.csv","PAL247DCM1.csv","PAL248D1.csv","PAL250D1.csv","PAL250D2.csv","PAL252DCM1.csv",
"PAL270D1.csv","PAL299DCM1.csv","PAL300D1.csv","PAL301D1.csv","PAL302D1.csv","PAL306D1.csv","PAL307DCM1.csv",
"PAL332D1.csv","PAL333D1.csv","PAL334D1.csv","PAL340D1.csv","PAL355D1.csv","PAL356D1.csv","PAL359D1.csv",
"PAL362D1.csv","PAL374DCM1.csv","PAL375D1.csv","PAL378DCM1.csv","PAL379DCM1.csv","PAL382DCM1.csv")
#Create a vector to hold filenames of all HEX ("greasy") data files
filenamesHEX = c( "PAL001HEX1.CSV", "PAL003HEX1.CSV", "PAL007HEX1.CSV", "PAL014HEX1.CSV", "PAL015HEX1.CSV",
"PAL017HEX1.CSV", "PAL018HEX1.CSV", "PAL019H5.CSV",   "PAL029HEX1.CSV", "PAL042H2.CSV",
"PAL043HEX1.CSV", "PAL044HEX1.CSV", "PAL046HEX1.CSV", "PAL048HEX1.CSV", "PAL050H1.CSV",
"PAL052H1.CSV",   "PAL052H2.CSV",   "PAL130H1.CSV", "PAL131H1.CSV",   "PAL133H1.CSV",
"PAL134H1.CSV",   "PAL137HEX1.CSV", "PAL227H1.CSV",   "PAL247HEX1.CSV","PAL248H1.CSV",
"PAL250H1.CSV", "PAL250H2.CSV",  "PAL252HEX1.CSV", "PAL270H1.CSV",   "PAL299HEX1.CSV",
"PAL300H1.CSV",   "PAL301H1.CSV", "PAL302H1.CSV",   "PAL306H1.CSV",   "PAL307HEX1.CSV",
"PAL332H1.CSV", "PAL333H1.CSV","PAL334H1.CSV",   "PAL340H1.CSV",   "PAL355H1.CSV",
"PAL356H1.CSV",   "PAL359H1.CSV",  "PAL362H1.CSV",   "PAL374HEX1.CSV", "PAL375H1.CSV",
"PAL378HEX1.CSV", "PAL379HEX1.CSV", "PAL382HEX1.CSV")
setwd("~/CoralProject/2016 Raw Data/All DCM")
PAL003DCM1 = read.csv(filenamesDCM[1],header=FALSE)
PAL006DCM1 = read.csv(filenamesDCM[2],header=FALSE)
PAL007DCM1 = read.csv(filenamesDCM[3],header=FALSE)
PAL014DCM1 = read.csv(filenamesDCM[4],header=FALSE)
PAL015DCM1 = read.csv(filenamesDCM[5],header=FALSE)
PAL017DCM1 = read.csv(filenamesDCM[6],header=FALSE)
PAL018DCM1 = read.csv(filenamesDCM[7],header=FALSE)
PAL019DCM1 = read.csv(filenamesDCM[8],header=FALSE)
PAL029DCM1 = read.csv(filenamesDCM[9],header=FALSE)
PAL042DCM1 = read.csv(filenamesDCM[10],header=FALSE)
PAL043DCM1 = read.csv(filenamesDCM[11],header=FALSE)
PAL044DCM1 = read.csv(filenamesDCM[12],header=FALSE)
PAL045DCM1 = read.csv(filenamesDCM[13],header=FALSE)
PAL048DCM1 = read.csv(filenamesDCM[14],header=FALSE)
PAL050DCM1 = read.csv(filenamesDCM[15],header=FALSE)
PAL052DCM1 = read.csv(filenamesDCM[16],header=FALSE)
PAL052DCM2 = read.csv(filenamesDCM[17],header=FALSE) # DISCARDED Broad peak @ 15.8 looked less like rest of data. Use D1.
PAL130DCM1 = read.csv(filenamesDCM[18],header=FALSE)
PAL131DCM1 = read.csv(filenamesDCM[19],header=FALSE)
PAL133DCM1 = read.csv(filenamesDCM[20],header=FALSE)
PAL134DCM1 = read.csv(filenamesDCM[21],header=FALSE)
PAL137DCM1 = read.csv(filenamesDCM[22],header=FALSE)
PAL227DCM1 = read.csv(filenamesDCM[23],header=FALSE)
PAL247DCM1 = read.csv(filenamesDCM[24],header=FALSE)
PAL248DCM1 = read.csv(filenamesDCM[25],header=FALSE)
PAL250DCM1 = read.csv(filenamesDCM[26],header=FALSE)
PAL250DCM2 = read.csv(filenamesDCM[27],header=FALSE)  # DISCARDED Graph 250D2 looked the same as 052D2. Use D1.
PAL252DCM1 = read.csv(filenamesDCM[28],header=FALSE)
PAL270DCM1 = read.csv(filenamesDCM[29],header=FALSE)
PAL299DCM1 = read.csv(filenamesDCM[30],header=FALSE)
PAL300DCM1 = read.csv(filenamesDCM[31],header=FALSE)
PAL301DCM1 = read.csv(filenamesDCM[32],header=FALSE)
PAL302DCM1 = read.csv(filenamesDCM[33],header=FALSE)
PAL306DCM1 = read.csv(filenamesDCM[34],header=FALSE)
PAL307DCM1 = read.csv(filenamesDCM[35],header=FALSE)
PAL332DCM1 = read.csv(filenamesDCM[36],header=FALSE)
PAL333DCM1 = read.csv(filenamesDCM[37],header=FALSE)
PAL334DCM1 = read.csv(filenamesDCM[38],header=FALSE)
PAL340DCM1 = read.csv(filenamesDCM[39],header=FALSE)
PAL355DCM1 = read.csv(filenamesDCM[40],header=FALSE)
PAL356DCM1 = read.csv(filenamesDCM[41],header=FALSE)
PAL359DCM1 = read.csv(filenamesDCM[42],header=FALSE)
PAL362DCM1 = read.csv(filenamesDCM[43],header=FALSE)
PAL374DCM1 = read.csv(filenamesDCM[44],header=FALSE)
PAL375DCM1 = read.csv(filenamesDCM[45],header=FALSE) # DISCARDED Chromatogram indicates nothing injected - removed
PAL378DCM1 = read.csv(filenamesDCM[46],header=FALSE)
PAL379DCM1 = read.csv(filenamesDCM[47],header=FALSE)
PAL382DCM1 = read.csv(filenamesDCM[48],header=FALSE)
#set working directory to file where all HEX samples are stored
setwd("~/CoralProject/2016 Raw Data/All HEX")
#read in each HEX data file and store as a dataframe
PAL001HEX1 = read.csv(filenamesHEX[1],header=FALSE)
PAL003HEX1 = read.csv(filenamesHEX[2],header=FALSE)
PAL007HEX1 = read.csv(filenamesHEX[3],header=FALSE)
PAL014HEX1 = read.csv(filenamesHEX[4],header=FALSE)
PAL015HEX1 = read.csv(filenamesHEX[5],header=FALSE)
PAL017HEX1 = read.csv(filenamesHEX[6],header=FALSE)
PAL018HEX1 = read.csv(filenamesHEX[7],header=FALSE)
PAL019HEX1 = read.csv(filenamesHEX[8],header=FALSE)
PAL029HEX1 = read.csv(filenamesHEX[9],header=FALSE)
PAL042HEX1 = read.csv(filenamesHEX[10],header=FALSE)
PAL043HEX1 = read.csv(filenamesHEX[11],header=FALSE)
PAL044HEX1 = read.csv(filenamesHEX[12],header=FALSE)
PAL046HEX1 = read.csv(filenamesHEX[13],header=FALSE)
PAL130HEX1 = read.csv(filenamesHEX[14],header=FALSE)
PAL131HEX1 = read.csv(filenamesHEX[15],header=FALSE)
PAL133HEX1 = read.csv(filenamesHEX[16],header=FALSE)
PAL250HEX1 = read.csv(filenamesHEX[17],header=FALSE)
PAL250HEX2 = read.csv(filenamesHEX[18],header=FALSE) # DISCARDED Used PAL250HEX1 since graph of PAL250HEX2 less consistent with other HEX trochis
PAL252HEX1 = read.csv(filenamesHEX[19],header=FALSE)
PAL270HEX1 = read.csv(filenamesHEX[20],header=FALSE)
PAL299HEX1 = read.csv(filenamesHEX[21],header=FALSE)
PAL332HEX1 = read.csv(filenamesHEX[22],header=FALSE)
PAL333HEX1 = read.csv(filenamesHEX[23],header=FALSE)
PAL334HEX1 = read.csv(filenamesHEX[24],header=FALSE)
PAL340HEX1 = read.csv(filenamesHEX[25],header=FALSE)
PAL355HEX1 = read.csv(filenamesHEX[26],header=FALSE)
PAL356HEX1 = read.csv(filenamesHEX[27],header=FALSE)
PAL359HEX1 = read.csv(filenamesHEX[28],header=FALSE)
PAL362HEX1 = read.csv(filenamesHEX[29],header=FALSE)
PAL374HEX1 = read.csv(filenamesHEX[30],header=FALSE)
PAL375HEX1 = read.csv(filenamesHEX[31],header=FALSE)
PAL378HEX1 = read.csv(filenamesHEX[32],header=FALSE)
PAL379HEX1 = read.csv(filenamesHEX[33],header=FALSE)
PAL382HEX1 = read.csv(filenamesHEX[34],header=FALSE)
TRUNC_BEGIN = 1 #first data point to use
TRUNC_END = 77001 #second data point to use
dfAllT_DCM = rbind(
#S. glaucum clade F - 24
c(003,"DCM","F", as.numeric(PAL003DCM1[TRUNC_BEGIN:TRUNC_END, 2])),
c(006,"DCM","F", as.numeric(PAL006DCM1[TRUNC_BEGIN:TRUNC_END, 2])),
c(007,"DCM","F", as.numeric(PAL007DCM1[TRUNC_BEGIN:TRUNC_END, 2])),
c(014,"DCM","F", as.numeric(PAL014DCM1[TRUNC_BEGIN:TRUNC_END, 2])),
c(015,"DCM","F", as.numeric(PAL015DCM1[TRUNC_BEGIN:TRUNC_END, 2])),
c(017,"DCM","F", as.numeric(PAL017DCM1[TRUNC_BEGIN:TRUNC_END, 2])),
c(018,"DCM","F", as.numeric(PAL018DCM1[TRUNC_BEGIN:TRUNC_END, 2])),
c(043,"DCM","F", as.numeric(PAL043DCM1[TRUNC_BEGIN:TRUNC_END, 2])),
c(044,"DCM","F", as.numeric(PAL044DCM1[TRUNC_BEGIN:TRUNC_END, 2])),
c(048,"DCM","F", as.numeric(PAL048DCM1[TRUNC_BEGIN:TRUNC_END, 2])),
c(050,"DCM","F", as.numeric(PAL050DCM1[TRUNC_BEGIN:TRUNC_END, 2])),
c(130,"DCM","F", as.numeric(PAL130DCM1[TRUNC_BEGIN:TRUNC_END, 2])),
c(131,"DCM","F", as.numeric(PAL131DCM1[TRUNC_BEGIN:TRUNC_END, 2])),
c(133,"DCM","F", as.numeric(PAL133DCM1[TRUNC_BEGIN:TRUNC_END, 2])),
c(134,"DCM","F", as.numeric(PAL134DCM1[TRUNC_BEGIN:TRUNC_END, 2])),
c(248,"DCM","F", as.numeric(PAL248DCM1[TRUNC_BEGIN:TRUNC_END, 2])),
c(270,"DCM","F", as.numeric(PAL270DCM1[TRUNC_BEGIN:TRUNC_END, 2])),
c(302,"DCM","F", as.numeric(PAL302DCM1[TRUNC_BEGIN:TRUNC_END, 2])),
c(333,"DCM","F", as.numeric(PAL333DCM1[TRUNC_BEGIN:TRUNC_END, 2])),
c(334,"DCM","F", as.numeric(PAL334DCM1[TRUNC_BEGIN:TRUNC_END, 2])),
c(374,"DCM","F", as.numeric(PAL374DCM1[TRUNC_BEGIN:TRUNC_END, 2])),
c(378,"DCM","F", as.numeric(PAL378DCM1[TRUNC_BEGIN:TRUNC_END, 2])),
c(382,"DCM","F", as.numeric(PAL382DCM1[TRUNC_BEGIN:TRUNC_END, 2])),
c(227,"DCM","F", as.numeric(PAL227DCM1[TRUNC_BEGIN:TRUNC_END, 2])),
#S. glaucum clade D - 10
c(029,"DCM","D", as.numeric(PAL029DCM1[TRUNC_BEGIN:TRUNC_END, 2])),
c(247,"DCM","D", as.numeric(PAL247DCM1[TRUNC_BEGIN:TRUNC_END, 2])),
c(252,"DCM","D", as.numeric(PAL252DCM1[TRUNC_BEGIN:TRUNC_END, 2])),
c(299,"DCM","D", as.numeric(PAL299DCM1[TRUNC_BEGIN:TRUNC_END, 2])),
c(300,"DCM","D", as.numeric(PAL300DCM1[TRUNC_BEGIN:TRUNC_END, 2])),
c(306,"DCM","D", as.numeric(PAL306DCM1[TRUNC_BEGIN:TRUNC_END, 2])),
c(332,"DCM","D", as.numeric(PAL332DCM1[TRUNC_BEGIN:TRUNC_END, 2])),
c(340,"DCM","D", as.numeric(PAL340DCM1[TRUNC_BEGIN:TRUNC_END, 2])),
c(355,"DCM","D", as.numeric(PAL355DCM1[TRUNC_BEGIN:TRUNC_END, 2])),
c(359,"DCM","D", as.numeric(PAL359DCM1[TRUNC_BEGIN:TRUNC_END, 2])),
#Trocheliophorum - 11
c(019,"DCM","T", as.numeric(PAL019DCM1[TRUNC_BEGIN:TRUNC_END, 2])),
c(042,"DCM","T", as.numeric(PAL042DCM1[TRUNC_BEGIN:TRUNC_END, 2])),
c(045,"DCM","T", as.numeric(PAL045DCM1[TRUNC_BEGIN:TRUNC_END, 2])),
c(052,"DCM","T", as.numeric(PAL052DCM1[TRUNC_BEGIN:TRUNC_END, 2])),
c(137,"DCM","T", as.numeric(PAL137DCM1[TRUNC_BEGIN:TRUNC_END, 2])),
c(250,"DCM","T", as.numeric(PAL250DCM1[TRUNC_BEGIN:TRUNC_END, 2])),
c(301,"DCM","T", as.numeric(PAL301DCM1[TRUNC_BEGIN:TRUNC_END, 2])),
c(307,"DCM","T", as.numeric(PAL307DCM1[TRUNC_BEGIN:TRUNC_END, 2])),
c(356,"DCM","T", as.numeric(PAL356DCM1[TRUNC_BEGIN:TRUNC_END, 2])),
c(362,"DCM","T", as.numeric(PAL362DCM1[TRUNC_BEGIN:TRUNC_END, 2])),
c(379,"DCM","T", as.numeric(PAL379DCM1[TRUNC_BEGIN:TRUNC_END, 2]))
)
#combine HEX data into one dataframe so that each row is one sample
# first three columns give information about the sample
# the following columns give instrument readings for "intensity" at a given time point (77001 time points)
dfAllT_HEX = rbind(
#S. glaucum clade F - 18
c(001, "HEX", "F", as.numeric(PAL001HEX1[TRUNC_BEGIN:TRUNC_END, 2])),
c(003, "HEX", "F", as.numeric(PAL003HEX1[TRUNC_BEGIN:TRUNC_END, 2])),
c(007, "HEX", "F", as.numeric(PAL007HEX1[TRUNC_BEGIN:TRUNC_END, 2])),
c(014, "HEX", "F", as.numeric(PAL014HEX1[TRUNC_BEGIN:TRUNC_END, 2])),
c(015, "HEX", "F", as.numeric(PAL015HEX1[TRUNC_BEGIN:TRUNC_END, 2])),
c(017, "HEX", "F", as.numeric(PAL017HEX1[TRUNC_BEGIN:TRUNC_END, 2])),
c(018, "HEX", "F", as.numeric(PAL018HEX1[TRUNC_BEGIN:TRUNC_END, 2])),
c(043, "HEX", "F", as.numeric(PAL043HEX1[TRUNC_BEGIN:TRUNC_END, 2])),
c(044, "HEX", "F", as.numeric(PAL044HEX1[TRUNC_BEGIN:TRUNC_END, 2])),
c(130, "HEX", "F", as.numeric(PAL130HEX1[TRUNC_BEGIN:TRUNC_END, 2])),
c(131, "HEX", "F", as.numeric(PAL131HEX1[TRUNC_BEGIN:TRUNC_END, 2])),
c(133, "HEX", "F", as.numeric(PAL133HEX1[TRUNC_BEGIN:TRUNC_END, 2])),
c(270, "HEX", "F", as.numeric(PAL270HEX1[TRUNC_BEGIN:TRUNC_END, 2])),
c(333, "HEX", "F", as.numeric(PAL333HEX1[TRUNC_BEGIN:TRUNC_END, 2])),
c(334, "HEX", "F", as.numeric(PAL334HEX1[TRUNC_BEGIN:TRUNC_END, 2])),
c(374, "HEX", "F", as.numeric(PAL374HEX1[TRUNC_BEGIN:TRUNC_END, 2])),
c(378, "HEX", "F", as.numeric(PAL378HEX1[TRUNC_BEGIN:TRUNC_END, 2])),
c(382, "HEX", "F", as.numeric(PAL382HEX1[TRUNC_BEGIN:TRUNC_END, 2])),
#S. glaucum clade D - 8
c(029, "HEX", "D", as.numeric(PAL029HEX1[TRUNC_BEGIN:TRUNC_END, 2])),
c(046, "HEX", "D", as.numeric(PAL046HEX1[TRUNC_BEGIN:TRUNC_END, 2])),
c(252, "HEX", "D", as.numeric(PAL252HEX1[TRUNC_BEGIN:TRUNC_END, 2])),
c(299, "HEX", "D", as.numeric(PAL299HEX1[TRUNC_BEGIN:TRUNC_END, 2])),
c(332, "HEX", "D", as.numeric(PAL332HEX1[TRUNC_BEGIN:TRUNC_END, 2])),
c(340, "HEX", "D", as.numeric(PAL340HEX1[TRUNC_BEGIN:TRUNC_END, 2])),
c(355, "HEX", "D", as.numeric(PAL355HEX1[TRUNC_BEGIN:TRUNC_END, 2])),
c(359, "HEX", "D", as.numeric(PAL359HEX1[TRUNC_BEGIN:TRUNC_END, 2])),
#Trocheliophorum - 7
c(019, "HEX", "T", as.numeric(PAL019HEX1[TRUNC_BEGIN:TRUNC_END, 2])),
c(042, "HEX", "T", as.numeric(PAL042HEX1[TRUNC_BEGIN:TRUNC_END, 2])),
c(250, "HEX", "T", as.numeric(PAL250HEX1[TRUNC_BEGIN:TRUNC_END, 2])),
c(356, "HEX", "T", as.numeric(PAL356HEX1[TRUNC_BEGIN:TRUNC_END, 2])),
c(362, "HEX", "T", as.numeric(PAL362HEX1[TRUNC_BEGIN:TRUNC_END, 2])),
c(375, "HEX", "T", as.numeric(PAL375HEX1[TRUNC_BEGIN:TRUNC_END, 2])),
c(379, "HEX", "T", as.numeric(PAL379HEX1[TRUNC_BEGIN:TRUNC_END, 2]))
)
#generate column name vector for the dataframe
names <- function(){
nameVec = c(TRUNC_BEGIN:TRUNC_END)
nameVec = as.character(nameVec)
for(i in TRUNC_BEGIN:TRUNC_END){
nameVec[i] = paste("t", nameVec[i], sep="")
}
nameVec = c("Sample", "Greasiness", "Clade", nameVec)
return(nameVec)
}
colNames = names()
colnames(dfAllT_DCM) <- colNames
colnames(dfAllT_HEX) <- colNames
DELTA = 0.00033333333333 #Time increment by which intensity is measured (in minutes)
trap <- function(intens, delta) {
intens1 <- rep(intens)
intens1 = intens1[-1]
intens = intens[1:length(intens)-1]
trapArea = (intens + intens1)*delta/2
return(c(as.numeric(trapArea), 0))
}
norm <- function(trapArea){
tot = sum(trapArea)
return(trapArea/tot)
}
#Process as dataframe - CHANGE TO AS.NUMERIC
#truncate
TRUNC_BEGIN = 15003
TRUNC_END = 62004
#We omit the first and last 15000 time observations (5 minutes) because there is little observed activity during those time intervals.
dfDCM_area = dfAllT_DCM[,TRUNC_BEGIN:TRUNC_END]
for(i in 1:nrow(dfDCM_area)){
dfDCM_area[i, ] = norm(trap(as.numeric(dfDCM_area[i, ]), DELTA))
}
rownames(dfDCM_area) = dfAllT_DCM[,1]
dfHEX_area = dfAllT_HEX[,TRUNC_BEGIN:TRUNC_END]
for(i in 1:nrow(dfHEX_area)){
dfHEX_area[i, ] = norm(trap(as.numeric(dfHEX_area[i, ]), DELTA))
}
rownames(dfHEX_area) = dfAllT_HEX[,1]
binner <- function(df, binWidth, delta) {
rowz = c()
for(j in 1:nrow(df)) {
col = c()
for(i in seq(1, ncol(df)-binWidth, binWidth)){
end = min(ncol(df),i + binWidth - 1)
col = c(col, sum(as.numeric(df[j,i:end])))
}
rowz = rbind(rowz, col)
}
return(rowz)
}
binned_matrix_DCM = binner(dfDCM_area, 1100, DELTA)
bins = 1:ncol(binned_matrix_DCM)
for (i in 1:ncol(binned_matrix_DCM)){
bins[i] = paste("Bin", as.character(i))
}
dimnames(binned_matrix_DCM) = list(dfAllT_DCM[,1], bins)
binned_matrix_HEX = binner(dfHEX_area, 1100, DELTA)
dimnames(binned_matrix_HEX) = list(dfAllT_HEX[,1], bins)
setwd("~/CoralProject")
distance(binned_matrix_DCM)
dist(binned_matrix_DCM)
?hclust
hcDCM = hclus(hcDCM)
hcDCM = hclust(hcDCM)
hcDCM = hclust(distDCM)
distDCM = dist(binned_matrix_DCM)
hcDCM = hclust(distDCM)
plot(hcDCM)
complete.matrix <- binned_matrix_DCM #Make another matrix to leave original data unaffected
sd.complete.matrix <- scale(complete.matrix) #Scale the values
sd.complete.matrix <- data.frame(sd.complete.matrix) #Perform SD
sd.complete.matrix[1:5, 1:5]
F = as.numeric(which(dfAllT_DCM[,3]=="F"))
D = as.numeric(which(dfAllT_DCM[,3]=="D"))
T = as.numeric(which(dfAllT_DCM[,3]=="T"))
F
D
T
length(F)
length(D)
length(T)
sd.complete.matrix$groups <- c(rep("F",24), rep("D",10), rep("T", 11))
rownames(sd.complete.matrix) <- make.unique(sd.complete.matrix$groups)
colorCodes <- c(D="green", F="blue", T="grey")
distSamples <- dist(sd.complete.matrix)
hc <- hclust(distSamples)
dend <- as.dendrogram(hc)
dataframeHEX = rbind(
c(001, "HEX", "F", norm(trap(as.numeric(PAL001HEX1[TRUNC_BEGIN:TRUNC_END, 2]), DELTA))),
c(003, "HEX", "F", norm(trap(as.numeric(PAL003HEX1[TRUNC_BEGIN:TRUNC_END, 2]), DELTA))),
c(007, "HEX", "F", norm(trap(as.numeric(PAL007HEX1[TRUNC_BEGIN:TRUNC_END, 2]), DELTA))),
c(014, "HEX", "F", norm(trap(as.numeric(PAL014HEX1[TRUNC_BEGIN:TRUNC_END, 2]), DELTA))),
c(015, "HEX", "F", norm(trap(as.numeric(PAL015HEX1[TRUNC_BEGIN:TRUNC_END, 2]), DELTA))),
c(017, "HEX", "F", norm(trap(as.numeric(PAL017HEX1[TRUNC_BEGIN:TRUNC_END, 2]), DELTA))),
c(018, "HEX", "F", norm(trap(as.numeric(PAL018HEX1[TRUNC_BEGIN:TRUNC_END, 2]), DELTA))),
c(019, "HEX", "T", norm(trap(as.numeric(PAL019HEX1[TRUNC_BEGIN:TRUNC_END, 2]), DELTA))),
c(029, "HEX", "D", norm(trap(as.numeric(PAL029HEX1[TRUNC_BEGIN:TRUNC_END, 2]), DELTA))),
c(042, "HEX", "T", norm(trap(as.numeric(PAL042HEX1[TRUNC_BEGIN:TRUNC_END, 2]), DELTA))),
c(043, "HEX", "F", norm(trap(as.numeric(PAL043HEX1[TRUNC_BEGIN:TRUNC_END, 2]), DELTA))),
c(044, "HEX", "F", norm(trap(as.numeric(PAL044HEX1[TRUNC_BEGIN:TRUNC_END, 2]), DELTA))),
c(046, "HEX", "D", norm(trap(as.numeric(PAL046HEX1[TRUNC_BEGIN:TRUNC_END, 2]), DELTA))),
c(130, "HEX", "F", norm(trap(as.numeric(PAL130HEX1[TRUNC_BEGIN:TRUNC_END, 2]), DELTA))),
c(131, "HEX", "F", norm(trap(as.numeric(PAL131HEX1[TRUNC_BEGIN:TRUNC_END, 2]), DELTA))),
c(133, "HEX", "F", norm(trap(as.numeric(PAL133HEX1[TRUNC_BEGIN:TRUNC_END, 2]), DELTA))),
c(250, "HEX", "T", norm(trap(as.numeric(PAL250HEX1[TRUNC_BEGIN:TRUNC_END, 2]), DELTA))),
#  c(250, "HEX", "T", norm(trap(as.numeric(PAL250HEX2[TRUNC_BEGIN:TRUNC_END, 2]), DELTA))),
c(252, "HEX", "D", norm(trap(as.numeric(PAL252HEX1[TRUNC_BEGIN:TRUNC_END, 2]), DELTA))),
c(270, "HEX", "F", norm(trap(as.numeric(PAL270HEX1[TRUNC_BEGIN:TRUNC_END, 2]), DELTA))),
c(299, "HEX", "D", norm(trap(as.numeric(PAL299HEX1[TRUNC_BEGIN:TRUNC_END, 2]), DELTA))),
c(332, "HEX", "D", norm(trap(as.numeric(PAL332HEX1[TRUNC_BEGIN:TRUNC_END, 2]), DELTA))),
c(333, "HEX", "F", norm(trap(as.numeric(PAL333HEX1[TRUNC_BEGIN:TRUNC_END, 2]), DELTA))),
c(334, "HEX", "F", norm(trap(as.numeric(PAL334HEX1[TRUNC_BEGIN:TRUNC_END, 2]), DELTA))),
c(340, "HEX", "D", norm(trap(as.numeric(PAL340HEX1[TRUNC_BEGIN:TRUNC_END, 2]), DELTA))),
c(355, "HEX", "D", norm(trap(as.numeric(PAL355HEX1[TRUNC_BEGIN:TRUNC_END, 2]), DELTA))),
c(356, "HEX", "T", norm(trap(as.numeric(PAL356HEX1[TRUNC_BEGIN:TRUNC_END, 2]), DELTA))),
c(359, "HEX", "D", norm(trap(as.numeric(PAL359HEX1[TRUNC_BEGIN:TRUNC_END, 2]), DELTA))),
c(362, "HEX", "T", norm(trap(as.numeric(PAL362HEX1[TRUNC_BEGIN:TRUNC_END, 2]), DELTA))),
c(374, "HEX", "F", norm(trap(as.numeric(PAL374HEX1[TRUNC_BEGIN:TRUNC_END, 2]), DELTA))),
c(375, "HEX", "T", norm(trap(as.numeric(PAL375HEX1[TRUNC_BEGIN:TRUNC_END, 2]), DELTA))),
c(378, "HEX", "F", norm(trap(as.numeric(PAL378HEX1[TRUNC_BEGIN:TRUNC_END, 2]), DELTA))),
c(379, "HEX", "T", norm(trap(as.numeric(PAL379HEX1[TRUNC_BEGIN:TRUNC_END, 2]), DELTA))),
c(382, "HEX", "F", norm(trap(as.numeric(PAL382HEX1[TRUNC_BEGIN:TRUNC_END, 2]), DELTA)))
)
colnames(dataframeHEX) <- colNames
dim(dataframeHEX)
colnames(dataframeHEX) <- colNames
binned_matrix_DCM[1:5, 1:5]
rownames(binned_matrix_DCM)
?paste
samples = rownames(binned_matrix_DCM)
samples
clades = c(rep("F", 23), rep("D", 11), rep("T", 11))
clades
for(j in length(clades)){
clades[j] = paste(clades[j], samples[j])
}
clades
for(j in 1:length(clades)){
clades[j] = paste(clades[j], samples[j])
}
clades = c(rep("F", 23), rep("D", 11), rep("T", 11))
for(j in 1:length(clades)){
clades[j] = paste(clades[j], samples[j])
}
clust_DCM = binned_matrix_DCM
rownames(clust_DCM) = clades
distDCM = dist(clust_DCM)
hcDCM = hclust(distDCM)
plot(hcDCM)
clust_DCM_PC = PC_DCM
pca.result_DCM <- prcomp(binned_matrix_DCM, center = TRUE, scale = FALSE)
PC_DCM = pca.result_DCM$x
clust_DCM_PC = PC_DCM
rownames(clust_DCM_PC) = clades
distDCM_PC = dist(clust_DCM_PC)
hcDCM_PC = hclust(distDCM_PC)
plot(hcDCM_PC)
clust_DCM_PC = PC_DCM
rownames(clust_DCM_PC) = clades
distDCM_PC = dist(clust_DCM_PC)
hcDCM_PC = hclust(distDCM_PC)
plot(hcDCM_PC)
clust_DCM = binned_matrix_DCM
rownames(clust_DCM) = clades
distDCM = dist(clust_DCM)
hcDCM = hclust(distDCM)
plot(hcDCM)
hcDCM_PC = hclust(clust_DCM_PC)
?hclut
?hclust
clust_DCM_PC = PC_DCM
rownames(clust_DCM_PC) = clades
distDCM_PC = dist(clust_DCM_PC)
hcDCM_PC = hclust(d=distDCM_PC, method="single")
plot(hcDCM_PC)
distDCM_PC = dist(clust_DCM_PC)
hcDCM_PC = hclust(d=distDCM_PC, method="average")
plot(hcDCM_PC)
hcDCM_PC = hclust(d=distDCM_PC, method="median")
plot(hcDCM_PC)
hcDCM_PC = hclust(d=distDCM_PC, method="centroid")
plot(hcDCM_PC)
hcDCM_PC = hclust(d=distDCM_PC, method="mcquitty")
plot(hcDCM_PC)
hcDCM_PC = hclust(d=distDCM_PC, method="ward.D")
plot(hcDCM_PC)
hcDCM_PC = hclust(d=distDCM_PC, method="ward.D2")
plot(hcDCM_PC)
clust_HEX_PC = PC_HEX
