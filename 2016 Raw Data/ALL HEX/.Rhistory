#normalizes the vector input so that the total area adds to 1
norm <- function(trapArea){
tot = sum(trapArea)
return(trapArea/tot)
}
#We omit the first and last 15000 time observations (5 minutes) because there is little observed activity during those time intervals.
TRUNC_BEGIN = 15003
TRUNC_END = 62002
#Process as dataframe - CHANGE TO AS.NUMERIC
dfDCM_area = dfAllT_DCM[,TRUNC_BEGIN:TRUNC_END]
for(i in 1:nrow(dfDCM_area)){
dfDCM_area[i, ] = norm(trap(as.numeric(dfDCM_area[i, ]), DELTA))
}
rownames(dfDCM_area) = dfAllT_DCM[,1]
dfHEX_area = dfAllT_HEX[,TRUNC_BEGIN:TRUNC_END]
for(i in 1:nrow(dfHEX_area)){
dfHEX_area[i, ] = norm(trap(as.numeric(dfHEX_area[i, ]), DELTA))
}
rownames(dfHEX_area) = dfAllT_HEX[,1]
# Chunk 15: displayNormTrap
kable(dfDCM_area[1:5, 1:4], digits=5, caption="Snapshot of Normalized Trapezoidal Area Dataframe (DCM)")
kable(dfHEX_area[1:5, 1:4], caption="Snapshot of Normalized Trapezoidal Area Dataframe (HEX)", digits=5)
# Chunk 16: binarea
#returns a binned matrix whose bins are the sums of the areas df for each bin interval
#each bin has as many time intervals as specified by binWidth
#any remainder from ncol(df)/binwidth will not be included in the binned matrix
binner <- function(df, binWidth, delta) {
rowz = c()
for(j in 1:nrow(df)) {
col = c()
for(i in seq(1, ncol(df)-binWidth, binWidth)){
end = min(ncol(df),i + binWidth - 1)
col = c(col, sum(as.numeric(df[j,i:end])))
}
rowz = rbind(rowz, col)
}
return(rowz)
}
binned_matrix_DCM = binner(dfDCM_area, 1100, DELTA)
bins = 1:ncol(binned_matrix_DCM)
for (i in 1:ncol(binned_matrix_DCM)){
bins[i] = paste("Bin", as.character(i))
}
dimnames(binned_matrix_DCM) = list(dfAllT_DCM[,1], bins)
binned_matrix_HEX = binner(dfHEX_area, 1100, DELTA)
dimnames(binned_matrix_HEX) = list(dfAllT_HEX[,1], bins)
# Chunk 17: displaybinned
#display table of binned_matrix_DCM
kable(binned_matrix_DCM[1:5, 1:5])
#display table of binned_matrix_HEX
kable(binned_matrix_HEX[1:5, 1:5])
# Chunk 18: bincorrelation
par(mar=c(4.1, 4.1, 5.1, 2.1))
#correlation matrix between DCM bins
corrplot(cor(binned_matrix_DCM, binned_matrix_DCM), type="lower", main="DCM Bin Correlations")
#correlation matrix between HEX bins
corrplot(cor(binned_matrix_HEX, binned_matrix_HEX), type="lower", main="HEX Bin Correlations")
# Chunk 19: qqplots
#qqplot of bin to test normality of independent variables assumption? - did a few not great?
par(mfrow=c(2,2))
for(i in c(25, 26, 29, 35)) {
qqnorm(binned_matrix_DCM[,i], main=paste("Bin", as.character(i), "(DCM)"))
qqline(binned_matrix_DCM[,i])
}
par(mfrow=c(2,2))
for(i in c(35, 34, 23, 27)) {
qqnorm(binned_matrix_HEX[,i], main=paste("Bin", as.character(i), " (HEX)"))
qqline(binned_matrix_HEX[,i])
}
par(mfrow=c(1,1))
# Chunk 20: pcaDCM
#DCM:
pca.result_DCM <- prcomp(binned_matrix_DCM, center = TRUE, scale = FALSE)
#str(pca.result)
PC_DCM = pca.result_DCM$x
F = as.numeric(which(dfAllT_DCM[,3]=="F"))
D = as.numeric(which(dfAllT_DCM[,3]=="D"))
T = as.numeric(which(dfAllT_DCM[,3]=="T"))
# Chunk 21: pcaresults_DCM
plot(PC_DCM[,1],PC_DCM[,2],main = "PCA - 1100 Time Points Bin Width",xlab="PC1", col="white", ylab="PC2")
points(PC_DCM[F,1],PC_DCM[F,2],col="blue")
points(PC_DCM[D,1],PC_DCM[D,2],col="deeppink")
points(PC_DCM[T,1],PC_DCM[T,2],col="grey")
legend("topleft",legend=c("S. glaucum clade D","S. glaucum clade F","S. trocheliophorum"),col=c("deeppink","blue","grey"), pch=1,bty='o')
#3D plot
scatter3D(PC_DCM[,1], PC_DCM[,2], PC_DCM[,3], col="white")
points3D(PC_DCM[F,1],PC_DCM[F,2], PC_DCM[F,3], col="blue", add=TRUE)
points3D(PC_DCM[D,1],PC_DCM[D,2], PC_DCM[D,3], col="deeppink", add=TRUE)
points3D(PC_DCM[T,1],PC_DCM[T,2], PC_DCM[T,3], col="grey", add=TRUE)
legend("topright",legend=c("S. glaucum clade D","S. glaucum clade F","S. trocheliophorum"),col=c("deeppink","blue","grey"), pch=1,bty='o')
# Chunk 22: corrpcaresults_DCM
corrDCM = cor(PC_DCM,binned_matrix_DCM)
corrplot(t(corrDCM), method="color")
#DCM correlations
kable(corrDCM[1:3, 1:12], digits=3)
kable(corrDCM[1:3, 13:24], digits=3)
kable(corrDCM[1:3, 25:36], digits=3)
kable(corrDCM[1:3, 37:42], digits=3)
# Chunk 23: pca_HEX
#HEX:
pca.result_HEX <- prcomp(binned_matrix_HEX, center = TRUE, scale = FALSE)
#str(pca.result_HEX)
PC_HEX = pca.result_HEX$x
F = as.numeric(which(dfAllT_HEX[,3]=="F"))
D = as.numeric(which(dfAllT_HEX[,3]=="D"))
T = as.numeric(which(dfAllT_HEX[,3]=="T"))
# Chunk 24: pcaresults_HEX
#3D plot
scatter3D(PC_HEX[,1], PC_HEX[,2], PC_HEX[,3], col="white")
points3D(PC_HEX[F,1],PC_HEX[F,2], PC_HEX[F,3], col="blue", add=TRUE)
points3D(PC_HEX[D,1],PC_HEX[D,2], PC_HEX[D,3], col="deeppink", add=TRUE)
points3D(PC_HEX[T,1],PC_HEX[T,2], PC_HEX[T,3], col="grey", add=TRUE)
legend("topright",legend=c("S. glaucum clade D","S. glaucum clade F","S. trocheliophorum"),col=c("deeppink","blue","grey"), pch=1,bty='o')
#2D plot
plot(PC_HEX[,1],PC_HEX[,2],col="white",main = "PCA - 60 Second Bin Width",xlab="PC1",ylab="PC2")
points(PC_HEX[F,1],PC_HEX[F,2],col="blue")
points(PC_HEX[D,1],PC_HEX[D,2],col="deeppink")
points(PC_HEX[T,1],PC_HEX[T,2],col="grey")
legend("topright",legend=c("S. glaucum clade D","S. glaucum clade F","S. trocheliophorum"),col=c("deeppink","blue","grey"), pch=1,bty='o')
# Chunk 25: corrpcaresults_HEX
corrHEX = cor(PC_HEX,binned_matrix_HEX)
corrplot(t(corrHEX), method="color")
#DCM correlations
kable(corrHEX[1:3, 1:12], digits=3)
kable(corrHEX[1:3, 13:24], digits=3)
kable(corrHEX[1:3, 25:36], digits=3)
kable(corrHEX[1:3, 37:42], digits=3)
# Chunk 26: clusteringtest
#incorporate clade and sample info to name matrix for cluster
samplesDCM = rownames(binned_matrix_DCM[1:34,])
cladesDCM = c(rep("F", 23), rep("D", 11))
for(j in 1:length(cladesDCM)){
samplesDCM[j] = paste(cladesDCM[j], ".", samplesDCM[j],sep="")
}
colorCodes <- c(rep("deeppink", 23), rep("blue", 11))
clust_DCM = binned_matrix_DCM[1:34,]
rownames(clust_DCM) = samplesDCM
dist_methods = c("euclidian", "maximum", "manhattan", "canberra")
clust_methods = c("ward.D", "ward.D2", "single", "complete", "average", "mcquitty", "median", "centroid")
for(dist_method in dist_methods){
for(clust_method in clust_methods){
hcDCM = hclust(dist(clust_DCM, method=dist_method), method=clust_method)
colLab=c()
for(i in 1:length(hcDCM$order)){
colLab[i] = colorCodes[hcDCM$order[i]]
}
dend <- as.dendrogram(hcDCM)
labels_colors(dend) <- colLab
plot(dend, main=paste(clust_method, dist_method))
}
}
#incorporate clade and sample info to name matrix for cluster
samplesHEX = rownames(binned_matrix_HEX[1:26,])
cladesHEX = c(rep("F", 18), rep("D", 8))
for(j in 1:length(cladesHEX)){
samplesHEX[j] = paste(cladesHEX[j], ".", samplesHEX[j],sep="")
}
colorCodes <- c(rep("deeppink", 18), rep("blue", 8))
clust_HEX = binned_matrix_HEX[1:26,]
rownames(clust_HEX) = samplesHEX
for(dist_method in dist_methods){
for(clust_method in clust_methods){
hcHEX = hclust(dist(clust_HEX, method=dist_method), method=clust_method)
colLab=c()
for(i in 1:length(hcHEX$order)){
colLab[i] = colorCodes[hcHEX$order[i]]
}
dend <- as.dendrogram(hcHEX)
labels_colors(dend) <- colLab
plot(dend, main=paste(clust_method, dist_method))
}
}
# Chunk 27: cluteringDCM
#incorporate clade and sample info to name matrix for cluster
samplesDCM = rownames(binned_matrix_DCM[1:34,])
cladesDCM = c(rep("F", 23), rep("D", 11))
for(j in 1:length(cladesDCM)){
samplesDCM[j] = paste(cladesDCM[j], ".", samplesDCM[j],sep="")
}
colorCodes <- c(rep("deeppink", 23), rep("blue", 11))
clust_DCM = binned_matrix_DCM[1:34,]
rownames(clust_DCM) = samplesDCM
hcDCM = hclust(dist(clust_DCM, method="euclidian"), method="ward.D")
colLab=c()
for(i in 1:length(hcDCM$order)){
colLab[i] = colorCodes[hcDCM$order[i]]
}
dend <- as.dendrogram(hcDCM)
labels_colors(dend) <- colLab
plot(dend, main="DCM Clustering Using Euclidian Distance and Ward Clustering")
#incorporate clade and sample info to name matrix for cluster
samplesHEX = rownames(binned_matrix_HEX[1:26,])
cladesHEX = c(rep("F", 18), rep("D", 8))
hcHEX = hclust(dist(clust_HEX, method="euclidian"), method="median")
colLab=c()
for(j in 1:length(cladesHEX)){
samplesHEX[j] = paste(cladesHEX[j], ".", samplesHEX[j],sep="")
}
colorCodes <- c(rep("deeppink", 18), rep("blue", 8))
# Chunk 28: clustering HEX
clust_HEX = binned_matrix_HEX[1:26,]
rownames(clust_HEX) = samplesHEX
for(i in 1:length(hcHEX$order)){
colLab[i] = colorCodes[hcHEX$order[i]]
}
dend <- as.dendrogram(hcHEX)
labels_colors(dend) <- colLab
plot(dend, main="DCM Clustering Using Euclidian Distance and Median Clustering")
# Chunk 29: lda
#DCM:
binned_matrix_DCM = binner(dfDCM_area, 2000, DELTA)
lda_info = lda(as.factor(dataframe[,3])~binned_matrix_DCM)
lda_info$scaling #Linear discriminant coefficient matrix
lda_info_p = predict(lda_info,as.data.frame(binned_matrix_1100))
lda_info_pclass = predict(lda_info)$class
par(mar=c(5,4,4,4))
v = as.numeric(lda_info_pclass)
v[which(v==1)] =  "deeppink"   #D
v[which(v==2)] =  12           #F
v[which(v==3)] =  "grey"       #Trochi
plot(lda_info_p$x[,1],pch=16, col = v,main = "LDA - 22 Second Bin Width",xlab="df1",ylab="df2") #Plot the linear discriminants
legend("topright",legend=c("S. glaucum clade D","S. glaucum clade F","S. trocheliophorum"),col=c("deeppink",12,"grey"), pch=16,bty='o')
clade.manova = manova(binned_matrix_1100~as.factor(dataframe[,3]))
clade.wilks = summary(clade.manova,test="Wilks");clade.wilks
#HEX:
lda_info_HEX = lda(as.factor(dataframeHEX[,3])~binned_matrixHEX_1100)
lda_info_HEX$scaling #Linear discriminant coefficient matrix
lda_info_p = predict(lda_info_HEX,as.data.frame(binned_matrixHEX_1100))
lda_info_pclass = predict(lda_info_HEX)$class
par(mar=c(5,4,4,4))
v = as.numeric(lda_info_pclass)
v[which(v==1)] =  "deeppink"   #D
v[which(v==2)] =  12           #F
v[which(v==3)] =  "grey"       #Trochi
plot(lda_info_p$x[,1],pch=16, col = v,main = "LDA - 22 Second Bin Width",xlab="df1",ylab="df2") #Plot the linear discriminants
legend("topright",legend=c("S. glaucum clade D","S. glaucum clade F","S. trocheliophorum"),col=c("deeppink",12,"grey"), pch=16,bty='o')
clade.manova = manova(binned_matrix_1100~as.factor(dataframe[,3]))
clade.wilks = summary(clade.manova,test="Wilks");clade.wilks
binned_matrix_DCM = binner(dfDCM_area, 1100, DELTA)
dfDCM_area[1,3]
dfAllT_DCM[1,3]
lda_info = lda(as.factor(dfAllT_DCM[,3])~binned_matrix_DCM)
lda_info$scaling #Linear discriminant coefficient matrix
lda_info = lda(as.factor(dfAllT_DCM[,3])~binned_matrix_DCM)
kable(lda_info$scaling, caption="Linear Discriminant Coefficient Matrix") #Linear discriminant coefficient matrix
lda_info_p = predict(lda_info,as.data.frame(binned_matrix_1100))
lda_info_p = predict(lda_info,as.data.frame(binned_matrix_DCM))
lda_info_pclass = predict(lda_info)$class
par(mar=c(5,4,4,4))
v = as.numeric(lda_info_pclass)
v[which(v==1)] =  "deeppink"   #D
v[which(v==2)] =  12           #F
v[which(v==3)] =  "grey"       #Trochi
plot(lda_info_p$x[,1],pch=16, col = v,main = "LDA - 22 Second Bin Width",xlab="df1",ylab="df2") #Plot the linear discriminants
dfAllT_DCM[,3]
binned_matrix_DCM
lda_info_pclass = predict(lda_info)$class
par(mar=c(5,4,4,4))
v = as.numeric(lda_info_pclass)
legend("topright",legend=c("S. glaucum clade D","S. glaucum clade F","S. trocheliophorum"),col=c("deeppink",12,"grey"), pch=16,bty='o')
clade.manova = manova(binned_matrix_DCM~as.factor(dfAllT_DCM[,3]))
clade.wilks = summary(clade.manova,test="Wilks");clade.wilks
lda_info_HEX = lda(as.factor(dfAllT_HEX[,3])~binned_matrix_HEX)
kable(lda_info_HEX$scaling, caption="Linear Discriminant Coefficient Matrix (HEX)") #Linear discriminant coefficient matrix
lda_info_p = predict(lda_info_HEX,as.data.frame(binned_matrix_HEX))
lda_info_pclass = predict(lda_info_HEX)$class
par(mar=c(5,4,4,4))
v = as.numeric(lda_info_pclass)
v[which(v==1)] =  "deeppink"   #D
v[which(v==2)] =  12           #F
v[which(v==3)] =  "grey"       #Trochi
plot(lda_info_p$x[,1],pch=16, col = v,main = "LDA - 22 Second Bin Width",xlab="df1",ylab="df2") #Plot the linear discriminants
legend("topright",legend=c("S. glaucum clade D","S. glaucum clade F","S. trocheliophorum"),col=c("deeppink",12,"grey"), pch=16,bty='o')
legend("leftright",legend=c("S. glaucum clade D","S. glaucum clade F","S. trocheliophorum"),col=c("deeppink",12,"grey"), pch=16,bty='o')
plot(lda_info_p$x[,1],pch=16, col = v,main = "LDA - 22 Second Bin Width",xlab="df1",ylab="df2") #Plot the linear discriminants
legend("leftright",legend=c("S. glaucum clade D","S. glaucum clade F","S. trocheliophorum"),col=c("deeppink",12,"grey"), pch=16,bty='o')
legend("topleft",legend=c("S. glaucum clade D","S. glaucum clade F","S. trocheliophorum"),col=c("deeppink",12,"grey"), pch=16,bty='o')
clade.manova = manova(binned_matrix_1100~as.factor(dataframe[,3]))
clade.wilks = summary(clade.manova,test="Wilks");clade.wilks
clade.manova = manova(binned_matrix_HEX~as.factor(dfAllT_HEX[,3]))
clade.wilks = summary(clade.manova,test="Wilks");clade.wilks
plot(lda_info_p$x[,1],pch=16, col = v,main = "LDA - 22 Second Bin Width",xlab="df1",ylab="df2") #Plot the linear discriminants
legend("topleft",legend=c("S. glaucum clade D","S. glaucum clade F","S. trocheliophorum"),col=c("deeppink",12,"grey"), pch=16,bty='o')
clade.manova = manova(binned_matrix_HEX~as.factor(dfAllT_HEX[,3]))
clade.wilks = summary(clade.manova,test="Wilks");clade.wilks
clade.manova = manova(binned_matrix_DCM~as.factor(dfAllT_DCM[,3]))
clade.wilks = summary(clade.manova,test="Wilks");clade.wilks
clade.manova.HEX = manova(binned_matrix_HEX~as.factor(dfAllT_HEX[,3]))
clade.wilks = summary(clade.manova.HEX,test="Wilks");clade.wilks
clade.wilks = summary(clade.manova.HEX,test="Wilks");clade.wilks
binned_matrix_HEX
lda_info = lda(as.factor(dfAllT_DCM[,3])~binned_matrix_DCM)
kable(lda_info$scaling, caption="Linear Discriminant Coefficient Matrix (DCM)") #Linear discriminant coefficient matrix
?lda
lda_info_DCM = lda(as.factor(dfAllT_DCM[,3])~binned_matrix_DCM)
tab_lda_DCM = kable(dfAllT_DCM[,3], lda_info_DCM$class)
tab_lda_DCM = table(dfAllT_DCM[,3], lda_info_DCM$class)
lda_info_DCM$class
lda_info_DCM = lda(as.factor(dfAllT_DCM[,3])~binned_matrix_DCM)
tab_lda_DCM = table(dfAllT_DCM[,3], lda_info_DCM$class)
tab_lda_DCM = table(dfAllT_DCM[,3], lda_info_DCM$class)
lda_info_DCM
attribute(lda_info_DCM)
attributez(lda_info_DCM)
attributes(lda_info_DCM)
lda_info_DCM = lda(as.factor(dfAllT_DCM[,3])~binned_matrix_DCM, cv=TRUE)
tab_lda_DCM = table(dfAllT_DCM[,3], lda_info_DCM$class)
lda_info_DCM = lda(as.factor(dfAllT_DCM[,3])~binned_matrix_DCM, CV=TRUE)
tab_lda_DCM = table(dfAllT_DCM[,3], lda_info_DCM$class)
tab_lda_DCM
?dimnames
?matrix
dfAllT_HEX[,3]
dfAllT_DCM[,3]
percents_lda_DCM = rbind(tab_lda_DCM[1, ]/sum(tab_lda_DCM[1, ]), tab_lda_DCM[2, ]/sum(tab_lda_DCM[2, ]), tab_lda_DCM[3, ]/sum(tab_lda_DCM[3,]))
kable(percents_lda_DCM)
tab_lda_DCM
kable(percents_lda_DCM)
dimnames(percents_lda_DCM) = list(c("Actual D", "Actual F", "Actual T"), c("Predicted D", "Predicted F", "Predicted T"))
kable(percents_lda_DCM)
kable(percents_lda_DCM, digits=3)
percents_lda_DCM = rbind(tab_lda_DCM[1, ]/sum(tab_lda_DCM[1, ]), tab_lda_DCM[2, ]/sum(tab_lda_DCM[2, ]), tab_lda_DCM[3, ]/sum(tab_lda_DCM[3,]))*100
dimnames(percents_lda_DCM) = list(c("Actual D", "Actual F", "Actual T"), c("Predicted D", "Predicted F", "Predicted T"))
kable(percents_lda_DCM, digits=3)
percents_lda_DCM = rbind(tab_lda_DCM[1, ]/sum(tab_lda_DCM[1, ]), tab_lda_DCM[2, ]/sum(tab_lda_DCM[2, ]), tab_lda_DCM[3, ]/sum(tab_lda_DCM[3,]))
dimnames(percents_lda_DCM) = list(c("Actual D", "Actual F", "Actual T"), c("Predicted D", "Predicted F", "Predicted T"))
kable(percents_lda_DCM, digits=3, caption=)
kable(percents_lda_DCM, digits=3, caption="Proportion Actual vs. Predicted (DCM)")
tab_lda_DCM = table(dfAllT_DCM[,3], lda_info_DCM$class)
tab_lda_DCM
lda_info_DCM = lda(as.factor(dfAllT_DCM[1:24,3])~binned_matrix_DCM[1:24,], CV=TRUE)
lda_info_DCM = lda(as.factor(dfAllT_DCM[,3])~binned_matrix_DCM, CV=TRUE)
tab_lda_DCM = table(dfAllT_DCM[,3], lda_info_DCM$class)
percents_lda_DCM = rbind(tab_lda_DCM[1, ]/sum(tab_lda_DCM[1, ]), tab_lda_DCM[2, ]/sum(tab_lda_DCM[2, ]), tab_lda_DCM[3, ]/sum(tab_lda_DCM[3,]))
dimnames(percents_lda_DCM) = list(c("Actual D", "Actual F", "Actual T"), c("Predicted D", "Predicted F", "Predicted T"))
kable(percents_lda_DCM, digits=3, caption="Proportion Actual vs. Predicted (DCM)")
lda_info_DCM = lda(as.factor(dfAllT_DCM[,3])~binned_matrix_DCM, CV=TRUE)
tab_lda_DCM = table(dfAllT_DCM[,3], lda_info_DCM$class)
percents_lda_DCM = rbind(tab_lda_DCM[1, ]/sum(tab_lda_DCM[1, ]), tab_lda_DCM[2, ]/sum(tab_lda_DCM[2, ]), tab_lda_DCM[3, ]/sum(tab_lda_DCM[3,]))
dimnames(percents_lda_DCM) = list(c("Actual D", "Actual F", "Actual T"), c("Predicted D", "Predicted F", "Predicted T"))
kable(percents_lda_DCM, digits=3, caption="Proportion Actual vs. Predicted (DCM)")
lda_info_DCM = lda(as.factor(dfAllT_DCM[,3])~binned_matrix_DCM, CV=TRUE)
tab_lda_DCM = table(dfAllT_DCM[,3], lda_info_DCM$class)
percents_lda_DCM = rbind(tab_lda_DCM[1, ]/sum(tab_lda_DCM[1, ]), tab_lda_DCM[2, ]/sum(tab_lda_DCM[2, ]), tab_lda_DCM[3, ]/sum(tab_lda_DCM[3,]))
dimnames(percents_lda_DCM) = list(c("Actual D", "Actual F", "Actual T"), c("Predicted D", "Predicted F", "Predicted T"))
kable(percents_lda_DCM, digits=3, caption="Proportion Actual vs. Predicted (DCM)")
?colsums
?colsum
?colSums
percents_lda_DCM = rbind(percents_lda_DCM,colSums(percents_lda_DCM))
kable(percents_lda_DCM, digits=3, caption="Proportion Actual vs. Predicted (DCM)")
dimnames(percents_lda_DCM) = list(c("Actual D", "Actual F", "Actual T", "Total"), c("Predicted D", "Predicted F", "Predicted T"))
kable(percents_lda_DCM, digits=3, caption="Proportion Actual vs. Predicted (DCM)")
percents_lda_DCM = cbind(percents_lda_DCM, rowSums(percents_lda_DCM))
dimnames(percents_lda_DCM) = list(c("Actual D", "Actual F", "Actual T", "Total"), c("Predicted D", "Predicted F", "Predicted T", "Total"))
kable(percents_lda_DCM, digits=3, caption="Proportion Actual vs. Predicted (DCM)")
lda_info_DCM = lda(as.factor(dfAllT_DCM[,3])~binned_matrix_DCM, CV=TRUE)
tab_lda_DCM = table(dfAllT_DCM[,3], lda_info_DCM$class)
percents_lda_DCM = rbind(tab_lda_DCM[1, ]/sum(tab_lda_DCM[1, ]), tab_lda_DCM[2, ]/sum(tab_lda_DCM[2, ]), tab_lda_DCM[3, ]/sum(tab_lda_DCM[3,]))
tab_lda_DCM = rbind(tab_lda_DCM, colSums(tab_lda_DCM))
tab_lda_DCM = cbind(tab_lda_DCM, rowSums(tab_lda_DCM))
dimnames(percents_lda_DCM) = list(c("Actual D", "Actual F", "Actual T"), c("Predicted D", "Predicted F", "Predicted T"))
dimnames(tab_lda_DCM) = list(c("Actual D", "Actual F", "Actual T", "Total"), c("Predicted D", "Predicted F", "Predicted T", "Total"))
kable(percents_lda_DCM, digits=3, caption="Proportion Actual vs. Predicted (DCM)")
kable(tab_lda_DCM)
lda_info_DCM = lda(as.factor(dfAllT_DCM[,3])~binned_matrix_DCM, CV=TRUE)
tab_lda_DCM = table(dfAllT_DCM[,3], lda_info_DCM$class)
percents_lda_DCM = rbind(tab_lda_DCM[1, ]/sum(tab_lda_DCM[1, ]), tab_lda_DCM[2, ]/sum(tab_lda_DCM[2, ]), tab_lda_DCM[3, ]/sum(tab_lda_DCM[3,]))
dimnames(tab_lda_DCM) = list(c("Actual D", "Actual F", "Actual T"), c("Predicted D", "Predicted F", "Predicted T"))
precision = diag(tab_lda_DCM)/sum(tab_lda_DCM)
precision
precision = sum(diag(tab_lda_DCM))/sum(tab_lda_DCM)
precision
precision = diag(tab_lda_DCM)/sum(tab_lda_DCM)
precision
kable(percents_lda_DCM, digits=3, caption="Proportion Actual vs. Predicted (DCM)")
tab_lda_DCM
recall = diag(tab_lda_DCM)/rowSums(tab_lda_DCM)
recall
precision = diag(tab_lda_DCM)/rowsum(tab_lda_DCM)
precision = diag(tab_lda_DCM)/rowSums(tab_lda_DCM)
precision
?lda
dimnames(percents_lda_DCM) = list(c("Actual D", "Actual F", "Actual T"), c("Predicted D", "Predicted F", "Predicted T"))
lda_info_DCM = lda(as.factor(dfAllT_DCM[,3])~binned_matrix_DCM, CV=TRUE)
tab_lda_DCM = table(dfAllT_DCM[,3], lda_info_DCM$class)
percents_lda_DCM = rbind(tab_lda_DCM[1, ]/sum(tab_lda_DCM[1, ]), tab_lda_DCM[2, ]/sum(tab_lda_DCM[2, ]), tab_lda_DCM[3, ]/sum(tab_lda_DCM[3,]))
dimnames(tab_lda_DCM) = list(c("Actual D", "Actual F", "Actual T"), c("Predicted D", "Predicted F", "Predicted T"))
dimnames(percents_lda_DCM) = list(c("Actual D", "Actual F", "Actual T"), c("Predicted D", "Predicted F", "Predicted T"))
kable(tab_lda_DCM)
kable(percents_lda_DCM, digits=3, caption="Proportion Actual vs. Predicted (DCM)")
precision = diag(tab_lda_DCM)/rowSums(tab_lda_DCM) #true positive/(true positive+false positive)
recall = diag(tab_lda_DCM)/colSums(tab_lda_DCM)  #true positive/(true positive + false negative)
recall
precision
lda_info_DCM = lda(as.factor(dfAllT_DCM[,3])~binned_matrix_DCM, CV=TRUE)
tab_lda_DCM = table(dfAllT_DCM[,3], lda_info_DCM$class)
percents_lda_DCM = rbind(tab_lda_DCM[1, ]/sum(tab_lda_DCM[1, ]), tab_lda_DCM[2, ]/sum(tab_lda_DCM[2, ]), tab_lda_DCM[3, ]/sum(tab_lda_DCM[3,]))
dimnames(tab_lda_DCM) = list(c("Actual D", "Actual F", "Actual T"), c("Predicted D", "Predicted F", "Predicted T"))
dimnames(percents_lda_DCM) = list(c("Actual D", "Actual F", "Actual T"), c("Predicted D", "Predicted F", "Predicted T"))
kable(tab_lda_DCM)
kable(percents_lda_DCM, digits=3, caption="Proportion Actual vs. Predicted (DCM)")
precision = diag(tab_lda_DCM)/rowSums(tab_lda_DCM) #true positive/(true positive+false positive)
recall = diag(tab_lda_DCM)/colSums(tab_lda_DCM)  #true positive/(true positive + false negative)
precision
recall
sum(tab_lda_DCM)
lda_info_DCM = lda(as.factor(dfAllT_DCM[,3])~binned_matrix_DCM, CV=TRUE)
tab_lda_DCM = table(dfAllT_DCM[,3], lda_info_DCM$class)
percents_lda_DCM = rbind(tab_lda_DCM[1, ]/sum(tab_lda_DCM[1, ]), tab_lda_DCM[2, ]/sum(tab_lda_DCM[2, ]), tab_lda_DCM[3, ]/sum(tab_lda_DCM[3,]))
dimnames(tab_lda_DCM) = list(c("Actual D", "Actual F", "Actual T"), c("Predicted D", "Predicted F", "Predicted T"))
dimnames(percents_lda_DCM) = list(c("Actual D", "Actual F", "Actual T"), c("Predicted D", "Predicted F", "Predicted T"))
kable(tab_lda_DCM)
kable(percents_lda_DCM, digits=3, caption="Proportion Actual vs. Predicted (DCM)")
dimnames(percents_lda_DCM) = list(Actual = c("D", "F", "T"), Predicted = c("D", "F", "T"))
kable(tab_lda_DCM)
kable(percents_lda_DCM, digits=3, caption="Proportion Actual vs. Predicted (DCM)")
lda_info_DCM = lda(as.factor(dfAllT_DCM[,3])~binned_matrix_DCM, CV=TRUE)
tab_lda_DCM = table(dfAllT_DCM[,3], lda_info_DCM$class)
percents_lda_DCM = rbind(tab_lda_DCM[1, ]/sum(tab_lda_DCM[1, ]), tab_lda_DCM[2, ]/sum(tab_lda_DCM[2, ]), tab_lda_DCM[3, ]/sum(tab_lda_DCM[3,]))
dimnames(tab_lda_DCM) = list(c("Actual D", "Actual F", "Actual T"), c("Predicted D", "Predicted F", "Predicted T"))
dimnames(percents_lda_DCM) = list(c("Actual D", "Actual F", "Actual T"), c("Predicted D", "Predicted F", "Predicted T"))
kable(tab_lda_DCM)
kable(percents_lda_DCM, digits=3, caption="Proportion Actual vs. Predicted (DCM)")
lda_info_DCM
lda_info_DCM$means
lda_info_DCM = lda(as.factor(dfAllT_DCM[,3])~binned_matrix_DCM, CV=FALSE)
lda_info_DCM$means
attributes(lda_info_DCM)
kable(lda_info_DCM$scaling, caption="Linear Discriminant Coefficient Matrix (DCM)") #Linear discriminant coefficient
?predict
#lda_info_DCM_pclass = lda_info_DCM_p$class
lda_info_DCM_pclass = lda_info_DCM_p$class
v = as.numeric(lda_info_DCM_pclass)
v[which(v==1)] =  "deeppink"   #D
v[which(v==2)] =  "blue"        #F
v[which(v==3)] =  "grey"       #Trochi
plot(lda_info_DCM_p$x[,1],pch=16, col = v,main = "LDA - 22 Second Bin Width",xlab="df1",ylab="df2") #Plot the linear discriminants
lda_info_DCM_p = predict(lda_info_DCM,as.data.frame(binned_matrix_DCM))
lda_info_pclass = lda_info_DCM_p$class
par(mar=c(5,4,4,4))
v = as.numeric(lda_info_pclass)
v[which(v==1)] =  "deeppink"   #D
v[which(v==2)] =  "blue"        #F
v[which(v==3)] =  "grey"       #Trochi
plot(lda_info_p$x[,1],pch=16, col = v,main = "LDA - 22 Second Bin Width",xlab="df1",ylab="df2") #Plot the linear discriminants
legend("topright",legend=c("S. glaucum clade D","S. glaucum clade F","S. trocheliophorum"),col=c("deeppink",12,"grey"), pch=16,bty='o')
legend("topleft",legend=c("S. glaucum clade D","S. glaucum clade F","S. trocheliophorum"),col=c("deeppink",12,"grey"), pch=16,bty='o')
lda_info_DCM_p = predict(lda_info_DCM,as.data.frame(binned_matrix_DCM))
lda_info_pclass = lda_info_DCM_p$class
par(mar=c(5,4,4,4))
v = as.numeric(lda_info_pclass)
v[which(v==1)] =  "deeppink"   #D
v[which(v==2)] =  12        #F
v[which(v==3)] =  "grey"       #Trochi
plot(lda_info_p$x[,1],pch=16, col = v,main = "LDA - 22 Second Bin Width",xlab="df1",ylab="df2") #Plot the linear discriminants
legend("topleft",legend=c("S. glaucum clade D","S. glaucum clade F","S. trocheliophorum"),col=c("deeppink",12,"grey"), pch=16,bty='o')
lda_info_DCM_p = predict(lda_info,as.data.frame(binned_matrix_DCM))
lda_info_pclass = predict(lda_info)$class
par(mar=c(5,4,4,4))
v = as.numeric(lda_info_pclass)
lda_info_DCM_pclass = predict(lda_info)$class
v = as.numeric(lda_info_DCM_pclass)
v[which(v==1)] =  "deeppink"   #D
v[which(v==2)] =  "blue"        #F
v[which(v==3)] =  "grey"       #Trochi
plot(lda_info_p$x[,1],pch=16, col = v,main = "LDA - 22 Second Bin Width",xlab="df1",ylab="df2") #Plot the linear discriminants
legend("topright",legend=c("S. glaucum clade D","S. glaucum clade F","S. trocheliophorum"),col=c("deeppink",12,"grey"), pch=16,bty='o')
lda_info_DCM_p = predict(lda_info_DCM,as.data.frame(binned_matrix_DCM))
lda_info_DCM_pclass = predict(lda_info_DCM)$class
par(mar=c(5,4,4,4))
v = as.numeric(lda_info_DCM_pclass)
v[which(v==1)] =  "deeppink"   #D
v[which(v==2)] =  "blue"        #F
v[which(v==3)] =  "grey"       #Trochi
plot(lda_info_p$x[,1],pch=16, col = v,main = "LDA - 22 Second Bin Width",xlab="df1",ylab="df2") #Plot the linear discriminants
legend("topleft",legend=c("S. glaucum clade D","S. glaucum clade F","S. trocheliophorum"),col=c("deeppink",12,"grey"), pch=16,bty='o')
lda_info = lda(as.factor(dfAllT_DCM[,3])~binned_matrix_DCM)
lda_info$scaling  #Linear discriminant coefficient matrix
lda_info_p = predict(lda_info,as.data.frame(binned_matrix_DCM))
lda_info_pclass = predict(lda_info)$class
v = as.numeric(lda_info_pclass)
v[which(v==1)] =  "deeppink"   #D
v[which(v==2)] =  12           #F
v[which(v==3)] =  "grey"       #Trochi
plot(lda_info_p$x[,1],pch=16, col = v,main = "LDA - 60 Second Bin Width",xlab="df1",ylab="df2") #Plot the linear discriminants
lda_info_DCM = lda(as.factor(dfAllT_DCM[,3])~binned_matrix_DCM, CV=FALSE)
lda_info_DCM = lda(as.factor(dfAllT_DCM[,3])~binned_matrix_DCM)
lda_info_DCM$scaling  #Linear discriminant coefficient matrix
lda_info_p = predict(lda_info_DCM,as.data.frame(binned_matrix_DCM))
lda_info_pclass = predict(lda_info_DCM)$class
v = as.numeric(lda_info_pclass)
v[which(v==1)] =  "deeppink"   #D
v[which(v==2)] =  12           #F
v[which(v==3)] =  "grey"       #Trochi
plot(lda_info_p$x[,1],pch=16, col = v,main = "LDA - 60 Second Bin Width",xlab="df1",ylab="df2") #Plot the linear discriminants
plot(lda_info_DCM_p$x[,1],pch=16, col = v,main = "LDA - 22 Second Bin Width",xlab="df1",ylab="df2") #Plot the linear discriminants
legend("topleft",legend=c("S. glaucum clade D","S. glaucum clade F","S. trocheliophorum"),col=c("deeppink",12,"grey"), pch=16,bty='o')
lda_info_DCM = lda(as.factor(dfAllT_DCM[,3])~binned_matrix_DCM, CV=FALSE)
kable(lda_info_DCM$scaling, caption="Linear Discriminant Coefficient Matrix (DCM)") #Linear discriminant coefficient
lda_info_DCM_p = predict(lda_info_DCM,as.data.frame(binned_matrix_DCM))
lda_info_DCM_pclass = predict(lda_info_DCM)$class
par(mar=c(5,4,4,4))
v = as.numeric(lda_info_DCM_pclass)
v[which(v==1)] =  "deeppink"   #D
v[which(v==2)] =  "blue"        #F
v[which(v==3)] =  "grey"       #Trochi
plot(lda_info_DCM_p$x[,1],pch=16, col = v,main = "LDA - 22 Second Bin Width",xlab="df1",ylab="df2") #Plot the linear discriminants
plot(lda_info_DCM_p$x[,1],pch=16, col = v,main = "LDA - 22 Second Bin Width",xlab="df1",ylab="df2") #Plot the linear discriminants
legend("bottomleft",legend=c("S. glaucum clade D","S. glaucum clade F","S. trocheliophorum"),col=c("deeppink",12,"grey"), pch=16,bty='o')
clade.manova = manova(binned_matrix_DCM~as.factor(dfAllT_DCM[,3]))
clade.wilks = summary(clade.manova,test="Wilks"); clade.wilks
